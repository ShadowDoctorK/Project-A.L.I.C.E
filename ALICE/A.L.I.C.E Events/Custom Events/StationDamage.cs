//Code Generated By CMDR Shadow Doctor K
//Class File Generated: 02/26/2019 8:59 PM
//Source Journal Line: (Custom A.L.I.C.E Event)
//Reference Journal Line: { "timestamp":"2018-11-22T16:58:24Z", "event":"ReceiveText", "From":"The Heart of Orion", "Message":"$STATION_AccidentalDamage;", "Message_Localised":"Watch where you're firing, Commander! You have been warned!", "Channel":"npc" }
//Reference Journal Line: { "timestamp":"2018-11-22T16:58:32Z", "event":"ReceiveText", "From":"The Heart of Orion", "Message":"$StationAggressorResponseMessage;", "Message_Localised":"Hostility logged, lethal response authorised.", "Channel":"npc" }

using ALICE_Core;
using ALICE_Data;
using ALICE_Internal;
using System;

namespace ALICE_Events
{
    /// <summary>
    /// Object Data Class
    /// </summary>
    public class StationDamage : Base
    {
        public string Station { get; set; }
        public bool Hostile { get; set; }

        //Default Constructor
        public StationDamage()
        {
            Station = Str();
            Hostile = Bool();
        }
    }

    /// <summary>
    /// Event Logic & Data Storage Class
    /// </summary>
    public class Event_StationDamage : Event
    {
        //Event Instance
        private StationDamage i = new StationDamage();
        public StationDamage I
        {
            get => i;
            set => i = value;
        }

        //Construct Custom Event
        public void Construct(ReceiveText Event)
        {
            try
            {
                I = new StationDamage()
                {
                    Event = "StationDamage",
                    Timestamp = Event.Timestamp,
                    Station = Event.From,
                    Hostile = false
                };

                if (Event.Message.ToLower().Contains(
                    IData.Messages.StationAggressorResponse))
                {
                    I.Hostile = true;
                }

                Record(Name, I);
                Logic();
            }
            catch (Exception ex)
            {
                ExceptionConstruct(Name, ex);
            }
        }

        //Variable Generation
        public override void Generate(object O)
        {
            try
            {
                Variables.Record(Name + "_Station", I.Station);
                Variables.Record(Name + "_Hostile", I.Hostile);                
            }
            catch (Exception ex)
            {
                ExceptionGenerate(Name, ex);
            }
        }

        //Plugin Logic Process
        public override void Process(object O)
        {
            try
            {
                //Audio - Station Damaged
                IStatus.Messages.Response.StationDamaged(
                    I.Station,                                          //Pass Station Name
                    Check.Internal.TriggerEvents(true, ClassName));     //Check Plugin Initialized
            }
            catch (Exception ex)
            {
                ExceptionProcess(Name, ex);
            }
        }
    }
}
