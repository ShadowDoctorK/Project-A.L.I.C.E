//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/20/2018 12:20 AM
//Source Journal Line: (Custom A.L.I.C.E Event)
//Reference Journal Line: { "timestamp":"2016-06-10T14:32:03Z", "event":"CommitCrime", "CrimeType":"assault", "Faction":"The Pilots Federation", "Victim":"Potapinski", "Bounty":210 }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;
using ALICE_EventLogic;

namespace ALICE_Events
{
    public class Event_BlockLandingPadMajor : Event_Base
    {
        public Event_BlockLandingPadMajor()
        {
            Name = "BlockLandingPadMajor";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            Process.BlockLandingPadMajor((BlockLandingPadMajor)GetEvent());

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            BlockLandingPadMajor Event = (BlockLandingPadMajor)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("Station", Event.Station.ToString());
            Variable_Craft("Amount", Event.Amount.ToString());
            Variable_Craft("ChargeType", Event.ChargeType.ToString());
            #endregion
        }

        public void Construct(CommitCrime Event)
        {
            BlockLandingPadMajor Temp = new BlockLandingPadMajor()
            {
                ChargeType = "Fine",
                Station = Event.Faction,
                Amount = Event.Fine
            };

            if (Get.Event.BlockLandingPadWarning.Station() != null)
            {
                Temp.Station = Get.Event.BlockLandingPadWarning.Station();
            }

            UpdateEvents(Name, Temp);
            Logic();
        }
    }

    #region BlockLandingPadMajor Event
    public class BlockLandingPadMajor : Base
    {
        public string Station { get; set; }
        public decimal Amount { get; set; }
        public string ChargeType { get; set; }
    }
    #endregion
}
