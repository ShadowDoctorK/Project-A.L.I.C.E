//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/20/2018 12:20 AM
//Source Journal Line: (Custom A.L.I.C.E Event)
//Reference Journal Line: { "timestamp":"2018-11-22T01:47:10Z", "event":"CommitCrime", "CrimeType":"dockingMinorBlockingAirlock", "Faction":"Eureka Mining Co-Operative", "Fine":300 }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;
using ALICE_EventLogic;

namespace ALICE_Events
{
    public class Event_BlockAirlockMinor : Event_Base
    {
        public Event_BlockAirlockMinor()
        {
            Name = "BlockAirlockMinor";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            Process.BlockAirlockMinor((BlockAirlockMinor)GetEvent());

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            BlockAirlockMinor Event = (BlockAirlockMinor)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("Station", Event.Station.ToString());
            Variable_Craft("Amount", Event.Amount.ToString());
            Variable_Craft("ChargeType", Event.ChargeType.ToString());
            #endregion
        }

        public void Construct(CommitCrime Event)
        {
            BlockAirlockMinor Temp = new BlockAirlockMinor()
            {
                ChargeType = "Fine",
                Station = "The Station",
                Amount = Event.Fine
            };
            
            if (Get.Event.BlockAirLockWarning.Station() != null)
            {
                Temp.Station = Get.Event.BlockAirLockWarning.Station();                
            }

            UpdateEvents(Name, Temp);
            Logic();
        }
    }

    #region BlockAirlockMinor Event
    public class BlockAirlockMinor : Base
    {
        public string Station { get; set; }
        public decimal Amount { get; set; }
        public string ChargeType { get; set; }
    }
    #endregion
}
