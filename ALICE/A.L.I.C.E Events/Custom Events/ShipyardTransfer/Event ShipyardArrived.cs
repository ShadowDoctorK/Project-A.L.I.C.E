//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/20/2018 12:20 AM
//Source Journal Line: (Custom A.L.I.C.E Event)

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;
using ALICE_EventLogic;

namespace ALICE_Events
{
    public class Event_ShipyardArrived : Event_Base
    {
        public List<ShipyardArrived> Tranfers = new List<ShipyardArrived>();
        public object Montior = new object();

        public Event_ShipyardArrived()
        {
            Name = "ShipyardArrived";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            Process.ShipyardArrived((ShipyardArrived)GetEvent());
        }

        public void Variables_Generate()
        {
            ShipyardArrived Event = (ShipyardArrived)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables

            #endregion
        }

        public void Construct(ShipyardTransfer Event)
        {
            ShipyardArrived Temp = new ShipyardArrived()
            {
                EndLocation = Get.Event.Docked.StarSystem(),
                EndStation = Get.Event.Docked.StationName(),
                StartLocation = Event.System,
                Time = Event.TransferTime,
                ThreeMinOut = true
            };

            if (Event.ShipType_Localised != null)
            { Temp.Ship = Event.ShipType_Localised; }
            else
            { Temp.Ship = Event.ShipType; }

            Tranfers.Add(Temp);
            UpdateEvents(Name, Temp);
            Logic();
        }
    }

    #region ShipyardArrived Event
    public class ShipyardArrived : Base
    {
        public string StartLocation { get; set; }
        public string EndLocation { get; set; }
        public string EndStation { get; set; }
        public decimal Time { get; set; }
        public string Ship { get; set; }
        public bool ThreeMinOut { get; set; }        
    }
    #endregion
}
