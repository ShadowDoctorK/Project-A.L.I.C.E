//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/20/2018 12:20 AM
//Source Journal Line: (Custom A.L.I.C.E Event)
//Reference Journal Line: { "timestamp":"2018-11-22T16:26:09Z", "event":"ReceiveText", "From":"Hennen Station", "Message":"$DockingPadBlockHostileComms;", "Message_Localised":"Docking pad violation, lethal response authorised", "Channel":"npc" }
//Reference Journal Line: { "timestamp":"2018-11-22T16:58:32Z", "event":"ReceiveText", "From":"The Heart of Orion", "Message":"$StationAggressorResponseMessage;", "Message_Localised":"Hostility logged, lethal response authorised.", "Channel":"npc" }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;
using ALICE_EventLogic;

namespace ALICE_Events
{
    public class Event_StationHostile : Event_Base
    {
        public Event_StationHostile()
        {
            Name = "StationHostile";

            StationHostile Temp = new StationHostile();
            UpdateEvents(Name, Temp);
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            Process.StationHostile((StationHostile)GetEvent());

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            StationHostile Event = (StationHostile)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("Station", Event.Station.ToString());
            Variable_Craft("Reason", Event.Reason.ToString());
            #endregion
        }

        public void Construct(BlockLandingPadHostile Event)
        {
            StationHostile Temp = new StationHostile()
            {
                Station = Event.Station,
                Reason = "BlockLandingPad"
            };

            UpdateEvents(Name, Temp);
            Logic();
        }

        public void Construct(BlockAirlockHostile Event)
        {
            StationHostile Temp = new StationHostile()
            {
                Station = Event.Station,
                Reason = "BlockAirlock"
            };

            UpdateEvents(Name, Temp);
            Logic();
        }

        public void Construct(ReceiveText Event)
        {
            StationHostile Temp = new StationHostile()
            {
                Station = Event.From,
                Reason = "StationDamage"
            };

            UpdateEvents(Name, Temp);
            Logic();
        }

        public void Construct(Assult Event)
        {
            StationHostile Temp = new StationHostile()
            {
                Station = Get.Event.NoFireZone.Station(),
                Reason = "Assult"
            };

            UpdateEvents(Name, Temp);
            Logic();
        }
    }

    #region StationHostile Event
    public class StationHostile : Base
    {
        public string Station { get; set; }      
        public string Reason { get; set; }

        public StationHostile()
        {
            Station = "The Station";
            Reason = "None";
        }
    }
    #endregion
}
