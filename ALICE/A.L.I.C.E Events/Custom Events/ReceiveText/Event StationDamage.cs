//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/20/2018 12:20 AM
//Source Journal Line: (Custom A.L.I.C.E Event)
//Reference Journal Line: { "timestamp":"2018-11-22T16:58:24Z", "event":"ReceiveText", "From":"The Heart of Orion", "Message":"$STATION_AccidentalDamage;", "Message_Localised":"Watch where you're firing, Commander! You have been warned!", "Channel":"npc" }
//Reference Journal Line: { "timestamp":"2018-11-22T16:58:32Z", "event":"ReceiveText", "From":"The Heart of Orion", "Message":"$StationAggressorResponseMessage;", "Message_Localised":"Hostility logged, lethal response authorised.", "Channel":"npc" }

using System;
using ALICE_Internal;
using ALICE_EventLogic;
using ALICE_Data;

namespace ALICE_Events
{
    public class Event_StationDamage : Event_Base
    {
        public Event_StationDamage()
        {
            Name = "StationDamage";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            Process.StationDamage((StationDamage)GetEvent());

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            StationDamage Event = (StationDamage)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("Station", Event.Station.ToString());
            Variable_Craft("Hostile", Event.Hostile.ToString());
            #endregion
        }

        public void Construct(ReceiveText Event)
        {
            StationDamage Temp = new StationDamage()
            {
                Station = Event.From
            };

            if (Event.Message.ToLower().Contains(
                IData.Messages.StationAggressorResponse))
            { Temp.Hostile = true; }

            UpdateEvents(Name, Temp);
            Logic();
        }
    }

    #region StationDamage Event
    public class StationDamage : Base
    {
        public string Station { get; set; }
        public bool Hostile { get; set; }

        public StationDamage()
        {
            Station = "None";
            Hostile = false;
        }
    }
    #endregion
}
