//Code Generated By CMDR Shadow Doctor K
//Class File Generated: 02/26/2019 8:59 PM
//Source Journal Line: (Custom A.L.I.C.E Event)
//Reference Journal Line: { "timestamp":"2018-11-22T16:26:09Z", "event":"ReceiveText", "From":"Hennen Station", "Message":"$DockingPadBlockHostileComms;", "Message_Localised":"Docking pad violation, lethal response authorised", "Channel":"npc" }
//Reference Journal Line: { "timestamp":"2018-11-22T16:58:32Z", "event":"ReceiveText", "From":"The Heart of Orion", "Message":"$StationAggressorResponseMessage;", "Message_Localised":"Hostility logged, lethal response authorised.", "Channel":"npc" }

using ALICE_Core;
using ALICE_Internal;
using System;

namespace ALICE_Events
{
    /// <summary>
    /// Object Data Class
    /// </summary>
    public class StationHostile : Base
    {
        public string Name { get; set; }
        public string Reason { get; set; }

        //Default Constructor
        public StationHostile()
        {
            Name = Str();
            Reason = Str();
        }
    }

    /// <summary>
    /// Event Logic & Data Storage Class
    /// </summary>
    public class Event_StationHostile : Event
    {
        //Event Instance
        public StationHostile I = new StationHostile();

        //Construct Event
        public void Construct(ReceiveText Event)
        {
            try
            {
                I = new StationHostile()
                {
                    Event = "StationHostile",
                    Timestamp = Event.Timestamp,
                    Name = Event.From,
                    Reason = "StationDamage"
                };

                Record(Name, I);
                Logic();
            }
            catch (Exception ex)
            {
                ExceptionConstruct(Name, ex);
            }
        }

        //Variable Generation
        public override void Generate(object O)
        {
            try
            {
                Variables.Record(Name + "_Name", I.Name);
                Variables.Record(Name + "_Reason", I.Reason);
            }
            catch (Exception ex)
            {
                ExceptionGenerate(Name, ex);
            }
        }

        //Plugin Logic Process
        public override void Process(object O)
        {
            try
            {
                //Audio - Station Damaged
                IStatus.Messages.Response.StationHostile(
                    I.Name,                                            //Pass Station Name
                    Check.Internal.TriggerEvents(true, ClassName));    //Check Plugin Initialized
            }
            catch (Exception ex)
            {
                ExceptionProcess(Name, ex);
            }
        }
    }
}