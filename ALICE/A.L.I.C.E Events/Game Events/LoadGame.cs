//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-14T04:10:51Z", "event":"LoadGame", "Commander":"Shadow Doctor K", "Horizons":true, "Ship":"Federation_Corvette", "Ship_Localised":"Federal Corvette", "ShipID":11, "ShipName":"MORNINGSTAR", "ShipIdent":"S-117", "FuelLevel":32.000000, "FuelCapacity":32.000000, "GameMode":"Group", "Group":"Shadow Doctor K", "Credits":298658411, "Loan":0 }

using ALICE_Actions;
using ALICE_Settings;
using ALICE_Status;
using System;

namespace ALICE_Events
{
    /// <summary>
    /// Object Data Class
    /// </summary>
    public class LoadGame : Base
    {
        public string Commander { get; set; }
        public string FID { get; set; }
        public bool Horizons { get; set; }
        public string Ship { get; set; }
        public string Ship_Localised { get; set; }
        public decimal ShipID { get; set; }
        public string ShipName { get; set; }
        public string ShipIdent { get; set; }
        public decimal FuelLevel { get; set; }
        public decimal FuelCapacity { get; set; }
        public string GameMode { get; set; }
        public string Group { get; set; }
        public decimal Credits { get; set; }
        public decimal Loan { get; set; }
        public bool StartLanded { get; set; }

        //Default Constructor
        public LoadGame()
        {
            Commander = Str();
            FID = Str();
            Horizons = Bool();
            Ship = Str();
            Ship_Localised = Str();
            ShipID = Dec();
            ShipName = Str();
            ShipIdent = Str();
            FuelLevel = Dec();
            FuelCapacity = Dec();
            GameMode = Str();
            Group = Str();
            Credits = Dec();
            Loan = Dec();
            StartLanded = Bool();
        }
    }

    /// <summary>
    /// Event Logic & Data Storage Class
    /// </summary>
    public class Event_LoadGame : Event
    {
        //Event Instance
        public LoadGame I { get; set; } = new LoadGame();

        //Variable Generation
        public override void Generate(object O)
        {
            try
            {
                Variables.Record(Name + "_Commander", I.Commander);
                Variables.Record(Name + "_PlayerID", I.FID);
                Variables.Record(Name + "_Horizons", I.Horizons);
                Variables.Switch(Name + "_Ship", I.Ship_Localised, I.Ship);
                Variables.Record(Name + "_ShipID", I.ShipID);
                Variables.Record(Name + "_ShipName", I.ShipName);
                Variables.Record(Name + "_ShipCallSign", I.ShipIdent);
                Variables.Record(Name + "_FuelLevel", I.FuelLevel);
                Variables.Record(Name + "_FuelCapacity", I.FuelCapacity);
                Variables.Record(Name + "_GameMode", I.GameMode);
                Variables.Record(Name + "_Group", I.Group);
                Variables.Record(Name + "_Credits", I.Credits);
                Variables.Record(Name + "_Load", I.Loan);
                Variables.Record(Name + "_Landed", I.StartLanded);
            }
            catch (Exception ex)
            {
                ExceptionGenerate(Name, ex);
            }
        }

        //Plugin Logic Preparations
        public override void Prepare(object O)
        {
            try
            {
                //Update Event Instance
                I = (LoadGame)O;
            }
            catch (Exception ex)
            {
                ExceptionPrepare(Name, ex);
            }
        }

        //Plugin Logic Process
        public override void Process(object O)
        {
            try
            {
                //Vechile = SRV
                if (I.Ship.ToLower().Contains("testbuggy"))
                {
                    IStatus.Vehicle = IStatus.V.SRV;
                }
                //Vechile = Fighter
                else if (I.Ship.ToLower().Contains("fighter"))
                {
                    IStatus.Vehicle = IStatus.V.Fighter;
                }
                //Vechile = Mothership
                else
                {
                    IStatus.Vehicle = IStatus.V.Mothership;
                }

                //Update Commander Name
                IStatus.Commander = I.Commander;

                //Load Ship Data
                if (ISettings.Shipyard.LoadShip(ClassName, IStatus.Commander, I.ShipID) == false)
                {
                    IStatus.Mothership = new Mothership();
                    IStatus.Mothership.Update(I);
                }

                //Load Firegroup Settings
                ISettings.Firegroups.GetConfig(ClassName,
                    IStatus.Mothership.ID, IStatus.Mothership.FingerPrint);

                //Reset Panels
                Call.ResetPanels();

                //Update Fuel Status
                IStatus.Fuel.Update(I);
            }
            catch (Exception ex)
            {
                ExceptionProcess(Name, ex);
            }
        }
    }
}