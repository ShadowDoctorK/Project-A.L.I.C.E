//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2019-04-23T21:08:10Z", "event":"Location", "DistFromStarLS":831.546448, "Docked":true, "StationName":"Debye Gateway", "StationType":"Bernal", "MarketID":3223220224, "StationFaction":{ "Name":"BD+23 296 Blue Federal Inc", "FactionState":"Investment" }, "StationGovernment":"$government_Corporate;", "StationGovernment_Localised":"Corporate", "StationAllegiance":"Federation", "StationServices":[ "Dock", "Autodock", "Commodities", "Contacts", "Exploration", "Missions", "Outfitting", "CrewLounge", "Rearm", "Refuel", "Repair", "Shipyard", "Tuning", "Workshop", "MissionsGenerated", "Facilitator", "FlightController", "StationOperations", "Powerplay", "SearchAndRescue", "StationMenu" ], "StationEconomy":"$economy_Industrial;", "StationEconomy_Localised":"Industrial", "StationEconomies":[ { "Name":"$economy_Industrial;", "Name_Localised":"Industrial", "Proportion":1.000000 } ], "StarSystem":"BD+23 296", "SystemAddress":2007930704578, "StarPos":[-54.40625,-68.28125,-81.59375], "SystemAllegiance":"Federation", "SystemEconomy":"$economy_Industrial;", "SystemEconomy_Localised":"Industrial", "SystemSecondEconomy":"$economy_None;", "SystemSecondEconomy_Localised":"None", "SystemGovernment":"$government_Corporate;", "SystemGovernment_Localised":"Corporate", "SystemSecurity":"$SYSTEM_SECURITY_low;", "SystemSecurity_Localised":"Low Security", "Population":2055042, "Body":"Debye Gateway", "BodyID":6, "BodyType":"Station", "Powers":[ "Li Yong-Rui" ], "PowerplayState":"Exploited", "Factions":[ { "Name":"BD+23 296 Blue Federal Inc", "FactionState":"Investment", "Government":"Corporate", "Influence":0.593407, "Allegiance":"Federation", "Happiness":"$Faction_HappinessBand1;", "Happiness_Localised":"Elated", "MyReputation":15.000000, "RecoveringStates":[ { "State":"PirateAttack", "Trend":0 } ], "ActiveStates":[ { "State":"Investment" }, { "State":"CivilLiberty" } ] }, { "Name":"Simarasir Dynamic Solutions", "FactionState":"None", "Government":"Corporate", "Influence":0.077922, "Allegiance":"Federation", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":0.000000 }, { "Name":"Pilots' Federation Local Branch", "FactionState":"None", "Government":"Democracy", "Influence":0.000000, "Allegiance":"PilotsFederation", "Happiness":"", "MyReputation":0.089870 }, { "Name":"Union of BD+23 296 Republic Party", "FactionState":"Boom", "Government":"Communism", "Influence":0.060939, "Allegiance":"Independent", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":0.000000, "ActiveStates":[ { "State":"Boom" } ] }, { "Name":"Natural BD+23 296 Constitution Party", "FactionState":"War", "Government":"Dictatorship", "Influence":0.109890, "Allegiance":"Independent", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":0.000000, "ActiveStates":[ { "State":"War" } ] }, { "Name":"Volkhabe Blue United Solutions", "FactionState":"War", "Government":"Corporate", "Influence":0.109890, "Allegiance":"Federation", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":0.000000, "ActiveStates":[ { "State":"War" } ] }, { "Name":"BD+23 296 Blue Mafia", "FactionState":"None", "Government":"Anarchy", "Influence":0.010989, "Allegiance":"Independent", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":0.000000 }, { "Name":"Independent BD+23 296 Future", "FactionState":"None", "Government":"Democracy", "Influence":0.036963, "Allegiance":"Independent", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":0.000000 } ], "SystemFaction":{ "Name":"BD+23 296 Blue Federal Inc", "FactionState":"Investment" }, "Conflicts":[ { "WarType":"war", "Status":"active", "Faction1":{ "Name":"Natural BD+23 296 Constitution Party", "Stake":"Twin Spiral Finishing", "WonDays":0 }, "Faction2":{ "Name":"Volkhabe Blue United Solutions", "Stake":"", "WonDays":2 } } ] }

using ALICE_Core;
using ALICE_Objects;
using System;
using System.Collections.Generic;

namespace ALICE_Events
{
    /// <summary>
    /// Object Data Class
    /// </summary>
    public class Location : Base
    {
        //Docked State
        public bool Docked { get; set; }

        //Position Data
        public decimal Latitude { get; set; }
        public decimal Longitude { get; set; }

        //Station Data
        public string StationName { get; set; }
        public string StationType { get; set; }
        public decimal MarketID { get; set; }
        public FactionData StationFaction { get; set; }
        public string StationGovernment { get; set; }
        public string StationGovernment_Localised { get; set; }
        public string StationAllegiance { get; set; }
        public List<string> StationServices { get; set; }
        public string StationEconomy { get; set; }
        public string StationEconomy_Localised { get; set; }
        public List<EconomyData> StationEconomies { get; set; }

        //System Data
        public string StarSystem { get; set; }
        public decimal SystemAddress { get; set; }
        public List<decimal> StarPos { get; set; }
        public string SystemAllegiance { get; set; }
        public string SystemEconomy { get; set; }
        public string SystemEconomy_Localised { get; set; }
        public string SystemSecondEconomy { get; set; }
        public string SystemSecondEconomy_Localised { get; set; }
        public string SystemGovernment { get; set; }
        public string SystemGovernment_Localised { get; set; }
        public string SystemSecurity { get; set; }
        public string SystemSecurity_Localised { get; set; }
        public decimal Population { get; set; }
        public string Body { get; set; }
        public decimal BodyID { get; set; }
        public string BodyType { get; set; }
        public List<Faction> Factions { get; set; }
        public FactionData SystemFaction { get; set; }
        public List<string> Powers { get; set; }
        public string PowerplayState { get; set; }

        #region 2019.04.23 Update
        public decimal DistFromStarLS { get; set; }        
        public List<Conflict> Conflicts { get; set; }
        #endregion


        //Default Constructor
        public Location()
        {
            //Docked State
            Docked = Bool();

            //Position Data
            Latitude = Dec();
            Longitude = Dec();

            //Station Data
            StationName = Str();
            StationType = Str();
            MarketID = Dec();
            StationFaction = new FactionData();
            StationGovernment = Str();
            StationGovernment_Localised = Str();
            StationAllegiance = Str();
            StationServices = new List<string>();
            StationEconomy = Str();
            StationEconomy_Localised = Str();
            StationEconomies = new List<EconomyData>();

            //System Data
            StarSystem = Str();
            SystemAddress = Dec();
            StarPos = new List<decimal>();
            SystemAllegiance = Str();
            SystemEconomy = Str();
            SystemEconomy_Localised = Str();
            SystemSecondEconomy = Str();
            SystemSecondEconomy_Localised = Str();
            SystemGovernment = Str();
            SystemGovernment_Localised = Str();
            SystemSecurity = Str();
            SystemSecurity_Localised = Str();
            Population = Dec();
            Body = Str();
            BodyID = Dec();
            BodyType = Str();
            Factions = new List<Faction>();
            SystemFaction = new FactionData();
            Powers = new List<string>();
            PowerplayState = Str();

            #region 2019.04.23 Update
            DistFromStarLS = Dec();
            Conflicts = new List<Conflict>();
            #endregion
        }

        public class Faction : Catch
        {
            public string Name { get; set; }
            public string FactionState { get; set; }
            public string Government { get; set; }
            public decimal Influence { get; set; }
            public string Allegiance { get; set; }
            public string Happiness { get; set; }
            public string Happiness_Localised { get; set; }
            public decimal MyReputation { get; set; }
            public List<States> ActiveStates { get; set; }
            public List<States> RecoveringStates { get; set; }
            public List<States> PendingStates { get; set; }

            public Faction()
            {
                Name = Str();
                FactionState = Str();
                Government = Str();
                Influence = Dec();
                Allegiance = Str();
                Happiness = Str();
                Happiness_Localised = Str();
                MyReputation = Dec();
                ActiveStates = new List<States>();
                PendingStates = new List<States>();
                RecoveringStates = new List<States>();
            }
        }

        public class EconomyData : Catch
        {
            public string Name { get; set; }
            public string Name_Localised { get; set; }
            public decimal Proportion { get; set; }

            public EconomyData()
            {
                Name = Str();
                Name_Localised = Str();
                Proportion = Dec();
            }
        }

        public class FactionData : Catch
        {
            public string Name { get; set; }
            public string FactionState { get; set; }

            public FactionData()
            {
                Name = Str();
                FactionState = Str();
            }
        }

        public class States : Catch
        {
            public string State { get; set; }
            public decimal Trend { get; set; }

            public States()
            {
                State = Str();
                Trend = Dec();
            }
        }

        #region 2019.04.23 Update
        public class Conflict : Catch
        {
            public string WarType { get; set; }
            public string Status { get; set; }
            public FactionWar Faction1 { get; set; }
            public FactionWar Faction2 { get; set; }

            public Conflict()
            {
                WarType = Str();
                Status = Str();
                Faction1 = new FactionWar();
                Faction2 = new FactionWar();
            }
        }

        public class FactionWar : Catch
        {
            public string Name { get; set; }
            public string Stake { get; set; }
            public decimal WonDays { get; set; }

            public FactionWar()
            {
                Name = Str();
                Stake = Str();
                WonDays = Dec();
            }
        }
        #endregion
    }

    /// <summary>
    /// Event Logic & Data Storage Class
    /// </summary>
    public class Event_Location : Event
    {
        //Event Instance
        public Location I { get; set; } = new Location();

        //Variable Generation
        public override void Generate(object O)
        {
            try
            {
                //Docked State
                Variables.Record(Name + "_Docked", I.Docked);

                //Position Date
                Variables.Record(Name + "_Latitude", I.Latitude);
                Variables.Record(Name + "_Longitude", I.Longitude);
                Variables.Record(Name + "_BodyName", I.Body);                
                Variables.Record(Name + "_BodyType", I.BodyType);

                //Station Data
                Variables.Record(Name + "_StationName", I.StationName);
                Variables.Record(Name + "_StationType", I.StationType);
                Variables.Record(Name + "_Market", I.MarketID);
                Variables.Record(Name + "_StationFaction", I.StationFaction.Name);
                Variables.Record(Name + "_StationState", I.StationFaction.FactionState);
                Variables.Record(Name + "_StationGovernment", I.StationGovernment_Localised);
                Variables.Record(Name + "_StationAllegiance", I.StationAllegiance);
                Variables.Record(Name + "_StationEconomy", I.StationEconomy_Localised);

                //System Data
                Variables.Record(Name + "_SystemName", I.StarSystem);
                Variables.Record(Name + "_SystemAddress", I.SystemAddress);                
                Variables.Record(Name + "_SystemFaction", I.SystemFaction.Name);
                Variables.Record(Name + "_SystemState", I.SystemFaction.FactionState);
                Variables.Record(Name + "_SystemSecurity", I.SystemSecurity_Localised);
                Variables.Record(Name + "_SystemGovernment", I.SystemGovernment_Localised);
                Variables.Record(Name + "_SystemAllegiance", I.SystemAllegiance);
                Variables.Record(Name + "_SystemPrimaryEconomy", I.SystemEconomy_Localised);
                Variables.Record(Name + "_SystemSecondaryEconomy", I.SystemSecondEconomy_Localised);
                Variables.Switch(Name + "_SystemPopulation", I.Population, 0);
                Variables.Switch(Name + "_SystemPower1", I.Powers, 0, "None");
                Variables.Switch(Name + "_SystemPower2", I.Powers, 1, "None");
                Variables.Record(Name + "_SystemPowerplayState", I.PowerplayState);
            }
            catch (Exception ex)
            {
                ExceptionGenerate(Name, ex);
            }
        }

        //Plugin Logic Preparations
        public override void Prepare(object O)
        {
            try
            {
                //Update Event Instance
                I = (Location)O;
            }
            catch (Exception ex)
            {
                ExceptionPrepare(Name, ex);
            }
        }

        //Plugin Logic Process
        public override void Process(object O)
        {
            try
            {
                //Update Docked State
                IStatus.Docking.Update(I);

                //Update Current System Object
                IObjects.SysetmPrevious = IObjects.SystemCurrent;                
                IObjects.SystemCurrent = IObjects.SystemCurrent.Update_SystemData(I);
                
                //Extended Logging
                IStatus.Docking.Log.Status();
            }
            catch (Exception ex)
            {
                ExceptionProcess(Name, ex);
            }
        }
    }
}