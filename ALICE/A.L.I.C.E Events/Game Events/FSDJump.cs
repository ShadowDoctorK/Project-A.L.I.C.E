//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2019-04-23T21:49:57Z", "event":"FSDJump", "StarSystem":"Diaguandri", "SystemAddress":670417429889, "StarPos":[-41.06250,-62.15625,-103.25000], "SystemAllegiance":"Independent", "SystemEconomy":"$economy_HighTech;", "SystemEconomy_Localised":"High Tech", "SystemSecondEconomy":"$economy_Refinery;", "SystemSecondEconomy_Localised":"Refinery", "SystemGovernment":"$government_Democracy;", "SystemGovernment_Localised":"Democracy", "SystemSecurity":"$SYSTEM_SECURITY_medium;", "SystemSecurity_Localised":"Medium Security", "Population":10303479, "Body":"Diaguandri A", "BodyID":2, "BodyType":"Star", "Powers":[ "Li Yong-Rui" ], "PowerplayState":"Exploited", "JumpDist":11.325, "FuelUsed":4.401582, "FuelLevel":22.185463, "Factions":[ { "Name":"Diaguandri Interstellar", "FactionState":"CivilWar", "Government":"Corporate", "Influence":0.078921, "Allegiance":"Independent", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":0.000000, "ActiveStates":[ { "State":"CivilWar" } ] }, { "Name":"People's MET 20 Liberals", "FactionState":"None", "Government":"Democracy", "Influence":0.133866, "Allegiance":"Federation", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":1.276560 }, { "Name":"Pilots' Federation Local Branch", "FactionState":"None", "Government":"Democracy", "Influence":0.000000, "Allegiance":"PilotsFederation", "Happiness":"", "MyReputation":0.089870 }, { "Name":"Natural Diaguandri Regulatory State", "FactionState":"None", "Government":"Dictatorship", "Influence":0.077922, "Allegiance":"Independent", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":0.000000 }, { "Name":"Cartel of Diaguandri", "FactionState":"None", "Government":"Anarchy", "Influence":0.036963, "Allegiance":"Independent", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":0.000000 }, { "Name":"Revolutionary Party of Diaguandri", "FactionState":"CivilWar", "Government":"Democracy", "Influence":0.078921, "Allegiance":"Federation", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":0.000000, "ActiveStates":[ { "State":"CivilWar" } ] }, { "Name":"The Brotherhood of the Dark Circle", "FactionState":"None", "Government":"Corporate", "Influence":0.088911, "Allegiance":"Independent", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":0.000000 }, { "Name":"EXO", "FactionState":"Boom", "Government":"Democracy", "Influence":0.504496, "Allegiance":"Independent", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":0.000000, "PendingStates":[ { "State":"Expansion", "Trend":0 } ], "ActiveStates":[ { "State":"Boom" } ] } ], "SystemFaction":{ "Name":"EXO", "FactionState":"Boom" }, "Conflicts":[ { "WarType":"civilwar", "Status":"active", "Faction1":{ "Name":"Diaguandri Interstellar", "Stake":"", "WonDays":0 }, "Faction2":{ "Name":"Revolutionary Party of Diaguandri", "Stake":"Diaguandri Clarity Systems", "WonDays":1 } } ] }

using ALICE_Actions;
using ALICE_Debug;
using ALICE_Internal;
using ALICE_Keybinds;
using ALICE_Objects;
using ALICE_Status;
using System;
using System.Collections.Generic;
using System.Threading;

namespace ALICE_Events
{
    /// <summary>
    /// Object Data Class
    /// </summary>
    public class FSDJump : Base
    {
        public string StarSystem { get; set; }
        public decimal SystemAddress { get; set; }
        public List<decimal> StarPos { get; set; }
        public string SystemAllegiance { get; set; }
        public string SystemEconomy { get; set; }
        public string SystemEconomy_Localised { get; set; }
        public string SystemSecondEconomy { get; set; }
        public string SystemSecondEconomy_Localised { get; set; }
        public string SystemGovernment { get; set; }
        public string SystemGovernment_Localised { get; set; }
        public string SystemSecurity { get; set; }
        public string SystemSecurity_Localised { get; set; }
        public decimal Population { get; set; }
        public List<string> Powers { get; set; }
        public string PowerplayState { get; set; }
        public decimal JumpDist { get; set; }
        public decimal FuelUsed { get; set; }
        public decimal FuelLevel { get; set; }
        public decimal BoostUsed { get; set; }
        public List<Faction> Factions { get; set; }
        public FactionData SystemFaction { get; set; }

        #region 2019.04.23 Update
        
        public string Body { get; set; }
        public decimal BodyID { get; set; }
        public string BodyType { get; set; }
        public List<Conflict> Conflicts { get; set; }
        #endregion

        //Default Constructor
        public FSDJump()
        {
            StarSystem = Str();
            SystemAddress = Dec();
            StarPos = new List<decimal>();
            SystemAllegiance = Str();
            SystemEconomy = Str();
            SystemEconomy_Localised = Str();
            SystemSecondEconomy = Str();
            SystemSecondEconomy_Localised = Str();
            SystemGovernment = Str();
            SystemGovernment_Localised = Str();
            SystemSecurity = Str();
            SystemSecurity_Localised = Str();
            Population = Dec();
            Powers = new List<string>();
            PowerplayState = Str();
            JumpDist = Dec();
            FuelUsed = Dec();
            FuelLevel = Dec();
            BoostUsed = Dec();
            Factions = new List<Faction>();
            SystemFaction = new FactionData();

            #region 2019.04.23 Update
            Body = Str();
            BodyID = Dec();
            BodyType = Str();
            Conflicts = new List<Conflict>();
            #endregion
        }

        public class Faction : Catch
        {
            public string Name { get; set; }
            public string FactionState { get; set; }
            public string Government { get; set; }
            public decimal Influence { get; set; }
            public string Allegiance { get; set; }
            public string Happiness { get; set; }
            public decimal MyReputation { get; set; }
            public string Happiness_Localised { get; set; }
            public List<States> RecoveringStates { get; set; }
            public List<States> ActiveStates { get; set; }
            public List<States> PendingStates { get; set; }

            public Faction()
            {
                Name = Str();
                FactionState = Str();
                Government = Str();
                Influence = Dec();
                Allegiance = Str();
                Happiness = Str();
                Happiness_Localised = Str();
                PendingStates = new List<States>();
                RecoveringStates = new List<States>();
                ActiveStates = new List<States>();
            }
        }

        public class States : Catch
        {
            public string State { get; set; }
            public decimal Trend { get; set; }

            public States()
            {
                State = Str();
                Trend = Dec();
            }
        }

        public class FactionData : Catch
        {
            public string Name { get; set; }
            public string FactionState { get; set; }

            public FactionData()
            {
                Name = Str();
                FactionState = Str();
            }
        }

        #region 2019.04.23 Update
        public class Conflict : Catch
        {
            public string WarType { get; set; }
            public string Status { get; set; }
            public FactionWar Faction1 { get; set; }
            public FactionWar Faction2 { get; set; }

            public Conflict()
            {
                WarType = Str();
                Status = Str();
                Faction1 = new FactionWar();
                Faction2 = new FactionWar();
            }
        }

        public class FactionWar : Catch
        {
            public string Name { get; set; }
            public string Stake { get; set; }
            public decimal WonDays { get; set; }

            public FactionWar()
            {
                Name = Str();
                Stake = Str();
                WonDays = Dec();
            }
        }
        #endregion
    }

    /// <summary>
    /// Event Logic & Data Storage Class
    /// </summary>
    public class Event_FSDJump : Event
    {
        //Event Instance
        public FSDJump I { get; set; } = new FSDJump();

        //Variable Generation
        public override void Generate(object O)
        {
            try
            {
                Variables.Record(Name + "_System", I.StarSystem);
                Variables.Record(Name + "_Address", I.SystemAddress);
                Variables.Record(Name + "_Allegiance", I.SystemAllegiance);
                Variables.Record(Name + "_Government", I.SystemGovernment_Localised);
                Variables.Record(Name + "_PrimaryEconomy", I.SystemEconomy_Localised);
                Variables.Record(Name + "_SecondaryEconomy", I.SystemSecondEconomy_Localised);
                Variables.Record(Name + "_Security", I.SystemSecurity_Localised);
                Variables.Record(Name + "_JumpDistance", I.JumpDist);
                Variables.Record(Name + "_FuelLevel", I.FuelLevel);
                Variables.Record(Name + "_FuelUsed", I.FuelUsed);
                Variables.Record(Name + "_Faction", I.SystemFaction.Name);
                Variables.Record(Name + "_State", I.SystemFaction.FactionState);
                Variables.Record(Name + "_PowerplayState", I.PowerplayState);
                Variables.Switch(Name + "_Population", I.Population, 0);
                Variables.Switch(Name + "_Power1", I.Powers, 0, "None");
                Variables.Switch(Name + "_Power2", I.Powers, 1, "None");

                Variables.Record(Name + "_Body", I.PowerplayState);
                Variables.Record(Name + "_BodyID", I.PowerplayState);
                Variables.Record(Name + "_BodyType", I.PowerplayState);
            }
            catch (Exception ex)
            {
                ExceptionGenerate(Name, ex);
            }
        }

        //Plugin Logic Preparations
        public override void Prepare(object O)
        {
            try
            {
                //Update Event Instance
                I = (FSDJump)O;
            }
            catch (Exception ex)
            {
                ExceptionPrepare(Name, ex);
            }
        }

        //Plugin Logic Process
        public override void Process(object O)
        {
            try
            {
                //Save Previous Systems Information
                IObjects.SysetmPrevious = IObjects.SystemCurrent;

                //Check Arrival Report
                IStatus.System.TargetArrival(I);

                //Check System Status & Update Current System Object
                IStatus.System.Status(I);

                //Post Jump Safeties
                if (ICheck.Order.PostJumpSafety(ClassName, true)            //Check Order
                    && ICheck.Initialized(ClassName))                       //Check Plugin Initialized
                {
                    IKeyboard.Press(IKey.Set_Speed_To_0, 0);
                }

                //Fuel Status Report
                IStatus.Fuel.ScoopingReset();
                if (ICheck.Report.FuelStatus(ClassName, true, true) == true && 
                    ICheck.Initialized(ClassName))
                {
                    IStatus.Fuel.Report = true;
                }

                //Sleep
                Thread.Sleep(100);

                //Assisted System Scans
                IActions.DiscoveryScanner.FirstScan = true;
                IActions.DiscoveryScanner.Scan();

            }
            catch (Exception ex)
            {
                ExceptionProcess(Name, ex);
            }
        }

        //Plugin Property Aligment
        public override void Alignment(object O)
        {
            try
            {
                IStatus.Docking.State = IEnums.DockingState.Undocked;
                IStatus.WeaponSafety = false;
                IStatus.Planet.OrbitalMode = false;
                IStatus.Planet.DecentReport = false;
                IStatus.Supercruise = true;
                IStatus.Hyperspace = false;
                IStatus.Touchdown = false;
                IStatus.Docking.Docked = false;
                ISet.Status.LandingGear(ClassName, false);
                IStatus.CargoScoop = false;
                IStatus.Fighter.Deployed = false;
                IStatus.Hardpoints = false;
            }
            catch (Exception ex)
            {
                ExceptionAlignment(Name, ex);
            }
        }
    }
}