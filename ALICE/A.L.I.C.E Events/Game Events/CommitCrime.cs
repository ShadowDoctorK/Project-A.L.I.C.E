//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-11T20:57:31Z", "event":"CommitCrime", "CrimeType":"collidedAtSpeedInNoFireZone_hulldamage", "Faction":"Eureka Mining Co-Operative", "Fine":100 }
//Reference Journal Line: { "timestamp":"2018-11-22T01:47:10Z", "event":"CommitCrime", "CrimeType":"dockingMinorBlockingAirlock", "Faction":"Eureka Mining Co-Operative", "Fine":300 }
//Reference Journal Line: { "timestamp":"2018-11-22T01:47:55Z", "event":"CommitCrime", "CrimeType":"dockingMinorBlockingLandingPad", "Faction":"Eureka Mining Co-Operative", "Fine":300 }

using ALICE_Core;
using ALICE_Data;
using ALICE_Debug;
using ALICE_Internal;
using System;

namespace ALICE_Events
{
    /// <summary>
    /// Object Data Class
    /// </summary>
    public class CommitCrime : Base
    {
        public string CrimeType { get; set; }
        public string Faction { get; set; }
        public string Victim { get; set; }
        public string Victim_Localised { get; set; }
        public decimal Fine { get; set; }
        public decimal Bounty { get; set; }

        //Default Constructor
        public CommitCrime()
        {
            CrimeType = Str();
            Faction = Str();
            Victim = Str();
            Victim_Localised = Str();
            Fine = Dec();
            Bounty = Dec();
        }
    }

    /// <summary>
    /// Event Logic & Data Storage Class
    /// </summary>
    public class Event_CommitCrime : Event
    {
        //Event Instance
        private CommitCrime i = new CommitCrime();
        public CommitCrime I
        {
            get => i;
            set => i = value;
        }

        //Variable Generation
        public override void Generate(object O)
        {
            try
            {
                Variables.Record(Name + "_Crime", I.CrimeType);
                Variables.Record(Name + "_Faction", I.Faction);
                Variables.Record(Name + "_Victim", I.Victim_Localised);

                switch (Variables.Switch(Name + "_Credits", I.Fine, I.Bounty))
                {
                    case true: Variables.Record(Name + "_Charge", "Fine"); break;
                    case false: Variables.Record(Name + "_Charge", "Bounty"); break;
                }
            }
            catch (Exception ex)
            {
                ExceptionGenerate(Name, ex);
            }
        }

        //Plugin Logic Preparations
        public override void Prepare(object O)
        {
            try
            {
                //Update Event Instance
                I = (CommitCrime)O;
            }
            catch (Exception ex)
            {
                ExceptionPrepare(Name, ex);
            }
        }

        //Plugin Logic Process
        public override void Process(object O)
        {
            try
            {
                //Convert String To Enum
                IEnums.CrimeType Crime = IEnums.ToEnum<IEnums.CrimeType>(IData.CrimeType.Convert(I.CrimeType), false);

                //Evaluate Crime Type
                switch (Crime)
                {
                    case IEnums.CrimeType.Assault:

                        //Construct Assault Event
                        IEvents.Assault.Construct(I); break;

                    case IEnums.CrimeType.MinorBlockingAirlock:

                        //Construct BlockAirlock Event
                        IEvents.BlockAirlock.Construct(I); break;

                    case IEnums.CrimeType.MajorBlockingAirlock:

                        //Construct BlockAirlock Event
                        IEvents.BlockAirlock.Construct(I); break;

                    case IEnums.CrimeType.MinorBlockingLandingPad:

                        //Construct BlockLandingPad Event
                        IEvents.BlockLandingPad.Construct(I); break;

                    case IEnums.CrimeType.MajorBlockingLandingPad:

                        //Construct BlockLandingPad Event
                        IEvents.BlockLandingPad.Construct(I); break;

                    case IEnums.CrimeType.FireInNoFireZone:

                        //IEvents.FireInNoFireZone.Construct(Event);
                        break;

                    case IEnums.CrimeType.Murder:

                        //IEvents.Murder.Construct(Event);
                        break;

                    case IEnums.CrimeType.Piracy:

                        break;

                    case IEnums.CrimeType.Interdicting:

                        break;

                    case IEnums.CrimeType.IllegalCargo:

                        break;

                    case IEnums.CrimeType.DisobeyPolice:

                        break;

                    case IEnums.CrimeType.FireInStation:

                        //IEvents.FireInStation.Construct(Event);
                        break;

                    case IEnums.CrimeType.DumpingDangerous:

                        break;

                    case IEnums.CrimeType.DumpingNearStation:

                        break;

                    case IEnums.CrimeType.DockingMinor_Trespass:

                        break;

                    case IEnums.CrimeType.DockingMajor_Trespass:

                        break;

                    case IEnums.CrimeType.CollidedAtSpeedInNoFireZone:

                        break;

                    case IEnums.CrimeType.CollidedAtSpeedInNoFireZone_HullDamage:

                        break;

                    default:

                        //Audio - Generic Crime
                        IStatus.Crime.Response.Generic(
                            ICheck.Initialized(ClassName));         //Check Plugin Initialized

                        //Record New Items To Developer Log
                        Logger.DeveloperLog("Developer Record: [CommitCrime:CrimeType] " + I.CrimeType);
                        break;
                }
            }
            catch (Exception ex)
            {
                ExceptionProcess(Name, ex);
            }
        }
    }
}
