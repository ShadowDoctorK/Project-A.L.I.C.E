//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-21T23:06:18Z", "event":"ReceiveText", "From":"$npc_name_decorate:#name=Henke 'Kniiip' Löfqvist;", "From_Localised":"Henke 'Kniiip' Löfqvist", "Message":"$Commuter_HostileScan05;", "Message_Localised":"Your ship's ID has been logged, any active hostilities will result in criminal charges being brought against you.", "Channel":"npc" }

using ALICE_Data;
using ALICE_Internal;
using System;

namespace ALICE_Events
{
    /// <summary>
    /// Object Data Class
    /// </summary>
    public class ReceiveText : Base
    {
        public string From { get; set; }
        public string From_Localised { get; set; }
        public string Message { get; set; }
        public string Message_Localised { get; set; }
        public string Channel { get; set; }

        //Default Constructor
        public ReceiveText()
        {
            From = Str();
            From_Localised = Str();
            Message = Str();
            Message_Localised = Str();
            Channel = Str();
        }
    }

    /// <summary>
    /// Event Logic & Data Storage Class
    /// </summary>
    public class Event_ReceiveText : Event
    {
        //Event Instance
        public ReceiveText I = new ReceiveText();

        //Variable Generation
        public override void Generate(object O)
        {
            try
            {
                Variables.Switch(Name + "_From", I.From_Localised, I.From);
                Variables.Switch(Name + "_Message", I.Message_Localised, I.Message);
                Variables.Record(Name + "_Channel", I.Channel);
            }
            catch (Exception ex)
            {
                ExceptionGenerate(Name, ex);
            }
        }

        //Plugin Logic Preparations
        public override void Prepare(object O)
        {
            try
            {
                //Update Event Instance
                I = (ReceiveText)O;
            }
            catch (Exception ex)
            {
                ExceptionPrepare(Name, ex);
            }
        }

        //Plugin Logic Process
        public override void Process(object O)
        {
            try
            {
                //No Fire Zone
                if (I.Message.Contains(IData.Messages.NoFireZone))
                {
                    IEvents.NoFireZone.Construct(I);
                }

                //Block Landing Pad Warning
                else if (I.Message.Contains(IData.Messages.DockingPadBlockWarning))
                {
                    IEvents.BlockLandingPad.Construct(I);
                }

                //Block Airlock Warning
                else if (I.Message.Contains(IData.Messages.DockingDoorBlockWarning))
                {
                    IEvents.BlockAirlock.Construct(I);
                }

                //Station Damage
                else if (I.Message.Contains(IData.Messages.AccidentalDamage))
                {
                    IEvents.StationDamage.Construct(I);
                }

                //Station Hostile
                else if (
                I.Message.Contains(IData.Messages.DockingPadBlockHostile) ||    //Block Landing Pad Hostile
                I.Message.Contains(IData.Messages.DockingDoorBlockHostile) ||   //Block Airlock Hostile
                I.Message.Contains(IData.Messages.StationAggressorResponse))    //Hostile Station Comms
                {
                    IEvents.StationHostile.Construct(I);
                }

                //No Action Items
                else if (
                I.Message.Contains(IData.Messages.InitializedComms) ||
                I.Message.Contains(IData.Messages.EnteredComms) ||
                I.Message.Contains(IData.Messages.DockingAllied) ||
                I.Message.Contains(IData.Messages.DockingChatterAllied) ||
                I.Message.Contains(IData.Messages.SmugglerNearDeath03))
                {
                    //No Actions
                }

                //Record New Message Types
                else
                {
                    Logger.DeveloperLog("Developer Record: [ReceiveText:Message] " + I.Message);
                    Logger.DeveloperLog("Developer Record: [ReceiveText:Message_Localised] " + I.Message_Localised);
                }
            }
            catch (Exception ex)
            {
                ExceptionProcess(Name, ex);
            }
        }
    }
}