//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-14T23:20:55Z", "event":"Scan", "ScanType":"Detailed", "BodyName":"Col 173 Sector KY-Q d5-47 9 a", "BodyID":33, "Parents":[ {"Planet":31}, {"Null":30}, {"Star":0} ], "DistanceFromArrivalLS":1443.539429, "TidalLock":true, "TerraformState":"", "PlanetClass":"Rocky body", "Atmosphere":"", "AtmosphereType":"None", "Volcanism":"major silicate vapour geysers volcanism", "MassEM":0.004034, "Radius":1115522.125000, "SurfaceGravity":1.291939, "SurfaceTemperature":277.356445, "SurfacePressure":0.000000, "Landable":true, "Materials":[ { "Name":"iron", "Percent":20.781742 }, { "Name":"sulphur", "Percent":20.289942 }, { "Name":"carbon", "Percent":17.061741 }, { "Name":"nickel", "Percent":15.718439 }, { "Name":"phosphorus", "Percent":10.923221 }, { "Name":"germanium", "Percent":5.985801 }, { "Name":"selenium", "Percent":3.175548 }, { "Name":"arsenic", "Percent":2.676932 }, { "Name":"yttrium", "Percent":1.241269 }, { "Name":"tin", "Percent":1.237855 }, { "Name":"mercury", "Percent":0.907504 } ], "Composition":{ "Ice":0.000000, "Rock":0.910457, "Metal":0.089543 }, "SemiMajorAxis":467320096.000000, "Eccentricity":0.000644, "OrbitalInclination":-0.697309, "Periapsis":138.517532, "OrbitalPeriod":73245.484375, "RotationPeriod":69701.476563, "AxialTilt":-0.231764 }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;
using ALICE_EventLogic;

namespace ALICE_Events
{
    public class Event_Scan : Event_Base
    {
        public Event_Scan()
        {
            Name = "Scan";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            Process.Scan((Scan)GetEvent());

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            Scan Event = (Scan)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("ScanType", Event.ScanType.Variable());
            Variable_Craft("BodyName", Event.BodyName.Variable());
            Variable_Craft("BodyID", Event.BodyID.Variable());
            //Variable_Craft("Parents", Event.Parents.Variable());
            Variable_Craft("DistanceFromArrivalLS", Event.DistanceFromArrivalLS.Variable());
            Variable_Craft("TidalLock", Event.TidalLock.Variable());
            Variable_Craft("TerraformState", Event.TerraformState.Variable());
            Variable_Craft("PlanetClass", Event.PlanetClass.Variable());
            Variable_Craft("Atmosphere", Event.Atmosphere.Variable());
            Variable_Craft("AtmosphereType", Event.AtmosphereType.Variable());
            Variable_Craft("Volcanism", Event.Volcanism.Variable());
            Variable_Craft("MassEM", Event.MassEM.Variable());
            Variable_Craft("StarType", Event.StarType.Variable());
            Variable_Craft("StellarMass", Event.StarType.Variable());
            Variable_Craft("Radius", Event.Radius.Variable());
            Variable_Craft("SurfaceGravity", Event.SurfaceGravity.Variable());
            Variable_Craft("AbsoluteMagnitude", Event.AbsoluteMagnitude.Variable());
            Variable_Craft("Age", Event.Age_MY.Variable());
            Variable_Craft("SurfaceTemperature", Event.SurfaceTemperature.Variable());
            Variable_Craft("SurfacePressure", Event.SurfacePressure.Variable());
            Variable_Craft("Landable", Event.Landable.Variable());
            //Variable_Craft("Materials", Event.Materials.Variable());
            //Variable_Craft("Composition", Event.Composition.Variable());
            Variable_Craft("Luminosity", Event.Luminosity.Variable());
            Variable_Craft("SemiMajorAxis", Event.SemiMajorAxis.Variable());
            Variable_Craft("Eccentricity", Event.Eccentricity.Variable());
            Variable_Craft("OrbitalInclination", Event.OrbitalInclination.Variable());
            Variable_Craft("Periapsis", Event.Periapsis.Variable());
            Variable_Craft("OrbitalPeriod", Event.OrbitalPeriod.Variable());
            Variable_Craft("RotationPeriod", Event.RotationPeriod.Variable());
            Variable_Craft("AxialTilt", Event.AxialTilt.Variable());
            Variable_Craft("ReserveLevel", Event.ReserveLevel.Variable());
            #endregion
        }
    }

    #region Scan Event
    public class Scan : Base
    {
        public string ScanType { get; set; }
        public string BodyName { get; set; }
        public decimal BodyID { get; set; }
        public List<ScanParent> Parents { get; set; }
        public decimal DistanceFromArrivalLS { get; set; }
        public bool TidalLock { get; set; }
        public string TerraformState { get; set; }
        public string PlanetClass { get; set; }
        public string Atmosphere { get; set; }
        public string AtmosphereType { get; set; }
        public List<ScanComposition> AtmosphereComposition { get; set; }
        public string Volcanism { get; set; }
        public decimal MassEM { get; set; }
        public string StarType { get; set; }
        public decimal StellarMass { get; set; }
        public decimal Radius { get; set; }
        public decimal SurfaceGravity { get; set; }
        public decimal AbsoluteMagnitude { get; set; }
        public decimal Age_MY { get; set; }
        public decimal SurfaceTemperature { get; set; }
        public decimal SurfacePressure { get; set; }
        public bool Landable { get; set; }
        public List<ScanMaterial> Materials { get; set; }
        public ScanComposite Composition { get; set; }
        public string Luminosity { get; set; }
        public decimal SemiMajorAxis { get; set; }
        public decimal Eccentricity { get; set; }
        public decimal OrbitalInclination { get; set; }
        public decimal Periapsis { get; set; }
        public decimal OrbitalPeriod { get; set; }
        public decimal RotationPeriod { get; set; }
        public decimal AxialTilt { get; set; }
        public List<ScanRings> Rings { get; set; }
        public string ReserveLevel { get; set; }

        public Scan()
        {
            ScanType = Default.String;
            BodyName = Default.String;
            BodyID = Default.Decimal;
            Parents = new List<ScanParent>();
            DistanceFromArrivalLS = Default.Decimal;
            TidalLock = Default.False;
            TerraformState = Default.String;
            PlanetClass = Default.String;
            Atmosphere = Default.String;
            AtmosphereType = Default.String;
            AtmosphereComposition = new List<ScanComposition>();
            Volcanism = Default.String;
            MassEM = Default.Decimal;
            StarType = Default.String;
            StellarMass = Default.Decimal;
            Radius = Default.Decimal;
            SurfaceGravity = Default.Decimal;
            AbsoluteMagnitude = Default.Decimal;
            Age_MY = Default.Decimal;
            SurfaceTemperature = Default.Decimal;
            SurfacePressure = Default.Decimal;
            Landable = Default.False;
            Materials = new List<ScanMaterial>();
            Composition = new ScanComposite();
            Luminosity = Default.String;
            SemiMajorAxis = Default.Decimal;
            Eccentricity = Default.Decimal;
            OrbitalInclination = Default.Decimal;
            Periapsis = Default.Decimal;
            OrbitalPeriod = Default.Decimal;
            RotationPeriod = Default.Decimal;
            AxialTilt = Default.Decimal;
            Rings = new List<ScanRings>();
            ReserveLevel = Default.String;
        }

        public class ScanComposition
        {
            public string Name { get; set; }
            public decimal Percent { get; set; }

            public ScanComposition()
            {
                Name = Default.String;
                Percent = Default.Decimal;
            }
        }

        public class ScanParent : Catch
        {
            public decimal Null { get; set; }
            public decimal Planet { get; set; }
            public decimal Star { get; set; }
            public decimal Ring { get; set; }

            public ScanParent()
            {
                Null = Default.Decimal;
                Planet = Default.Decimal;
                Star = Default.Decimal;
                Ring = Default.Decimal;
            }
        }

        public class ScanMaterial : Catch
        {
            public string Name { get; set; }
            public decimal Percent { get; set; }

            public ScanMaterial()
            {
                Name = Default.String;
                Percent = Default.Decimal;
            }
        }

        public class ScanComposite : Catch
        {
            public decimal Ice { get; set; }
            public decimal Rock { get; set; }
            public decimal Metal { get; set; }

            public ScanComposite()
            {
                Ice = Default.Decimal;
                Rock = Default.Decimal;
                Metal = Default.Decimal;
            }
        }

        public class ScanRings : Catch
        {
            public string Name { get; set; }
            public string RingClass { get; set; }
            public decimal MassMT { get; set; }
            public decimal InnerRad { get; set; }
            public decimal OuterRad { get; set; }

            public ScanRings()
            {
                Name = Default.String;
                RingClass = Default.String;
                MassMT = Default.Decimal;
                InnerRad = Default.Decimal;
                OuterRad = Default.Decimal;
            }
        }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == Scan)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.Scan>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
