//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-29T01:11:03Z", "event":"MissionCompleted", "Faction":"The Fuel Rats Mischief", "Name":"Mission_Massacre_Conflict_War_name", "MissionID":429329381, "TargetFaction":"Constitution Party of Fuelum", "KillCount":72, "DestinationSystem":"Fuelum", "DestinationStation":"Wollheim Vision", "Reward":2157547, "FactionEffects":[ { "Faction":"The Fuel Rats Mischief", "Effects":[ { "Effect":"$MISSIONUTIL_Interaction_Summary_lockdown_down;", "Effect_Localised":"$#MinorFaction; have less signs of imposing a security lockdown.", "Trend":"DownGood" } ], "Influence":[  ], "Reputation":"UpGood" }, { "Faction":"Constitution Party of Fuelum", "Effects":[ { "Effect":"$MISSIONUTIL_Interaction_Summary_lockdown_up;", "Effect_Localised":"Further terrorist actions could see the $#MinorFaction; considering a security lockdown ", "Trend":"UpBad" } ], "Influence":[  ], "Reputation":"DownBad" } ] }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Ships_Datalink_Interface;
using ALICE_Internal;

namespace ALICE_Events
{
    public class Event_MissionCompleted : Event_Base
    {
        public Event_MissionCompleted()
        {
            Name = "MissionCompleted";
        }

        public void Logic()
        {
            if (Manager.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            //Custom Logic Here.

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            MissionCompleted Event = (MissionCompleted)Manager.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("Faction", Event.Faction.Variable());
            Variable_Craft("Name", Event.Name.Variable());
            Variable_Craft("MissionID", Event.MissionID.Variable());
            Variable_Craft("TargetFaction", Event.TargetFaction.Variable());
            Variable_Craft("KillCount", Event.KillCount.Variable());
            Variable_Craft("DestinationSystem", Event.DestinationSystem.Variable());
            Variable_Craft("DestinationStation", Event.DestinationStation.Variable());
            Variable_Craft("Reward", Event.Reward.Variable());
            //Variable_Craft("FactionEffects", Event.FactionEffects.Variable());
            #endregion
        }
    }

    #region MissionCompleted Event
    public class MissionCompleted : Base
    {
        public string Faction { get; set; }
        public string Name { get; set; }
        public decimal MissionID { get; set; }
        public string TargetType { get; set; }
        public string TargetType_Localised { get; set; }
        public string Commodity { get; set; }
        public string Commodity_Localised { get; set; }
        public decimal Count { get; set; }
        public string TargetFaction { get; set; }
        public decimal KillCount { get; set; }
        public string DestinationSystem { get; set; }
        public string DestinationStation { get; set; }
        public string Target { get; set; }
        public string Target_Localised { get; set; }
        public decimal Reward { get; set; }
        public List<MatReward> MaterialsReward { get; set; }
        public List<MatReward> CommodityReward { get; set; }
        public decimal Donation { get; set; }
        public List<FactionReport> FactionEffects { get; set; }

        public class MatReward
        {
            public string Name { get; set; }
            public string Name_Localised { get; set; }
            public string Category { get; set; }
            public string Category_Localised { get; set; }
            public decimal Count { get; set; }
        }

        public class FactionReport
        {
            public string Faction { get; set; }
            public string Reputation { get; set; }
            public List<FactionEffect> Effects { get; set; }
            public List<FactionInfluence> Influence { get; set; }

            public class FactionEffect
            {
                public string Effect { get; set; }
                public string Effect_Localised { get; set; }
                public string Trend { get; set; }
            }

            public class FactionInfluence
            {
                public decimal SystemAddress { get; set; }
                public string Trend { get; set; }
            }
        }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == MissionCompleted)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.MissionCompleted>(RawLine);
//     Manager.UpdateEvents(EventName, Event);
//     Manager.Bounty.Logic();
// }
