//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-28T18:45:50Z", "event":"CommunityGoal", "CurrentGoals":[ { "CGID":544, "Title":"Senator Appeals for Aid", "SystemName":"Niflhel", "MarketName":"Biruni Port", "Expiry":"2018-11-01T15:00:00Z", "IsComplete":false, "CurrentTotal":2666596, "PlayerContribution":0, "NumContributors":1250, "TopTier":{ "Name":"Tier 8", "Bonus":"" }, "TopRankSize":10, "PlayerInTopRank":false, "TierReached":"Tier 3", "PlayerPercentileBand":100, "Bonus":300000 }, { "CGID":545, "Title":"Defending Trade in Niflhel", "SystemName":"Niflhel", "MarketName":"Biruni Port", "Expiry":"2018-11-01T15:00:00Z", "IsComplete":false, "CurrentTotal":14515558851, "PlayerContribution":0, "NumContributors":2222, "TopTier":{ "Name":"Tier 8", "Bonus":"" }, "TopRankSize":10, "PlayerInTopRank":false, "TierReached":"Tier 4", "PlayerPercentileBand":100, "Bonus":400000 } ] }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;

namespace ALICE_Events
{
    public class Event_CommunityGoal : Event_Base
    {
        public Event_CommunityGoal()
        {
            Name = "CommunityGoal";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            //Custom Logic Here.

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            CommunityGoal Event = (CommunityGoal)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables

            #endregion
        }
    }

    #region CommunityGoal Event
    public class CommunityGoal : Base
    {
        public List<CurrentGoal> CurrentGoals { get; set; }

        public class CurrentGoal : Catch
        {
            public decimal CGID { get; set; }
            public string Title { get; set; }
            public string SystemName { get; set; }
            public string MarketName { get; set; }
            public DateTime Expiry { get; set; }
            public bool IsComplete { get; set; }
            public decimal CurrentTotal { get; set; }
            public decimal PlayerContribution { get; set; }
            public decimal NumContributors { get; set; }
            public Tier TopTier { get; set; }
            public decimal TopRankSize { get; set; }
            public bool PlayerInTopRank { get; set; }
            public string TierReached { get; set; }
            public decimal PlayerPercentileBand { get; set; }
            public decimal Bonus { get; set; }

            public CurrentGoal()
            {
                CGID = Default.Decimal;
                Title = Default.String;
                SystemName = Default.String;
                MarketName = Default.String;
                Expiry = Default.DTime;
                IsComplete = Default.False;
                CurrentTotal = Default.Decimal;
                PlayerContribution = Default.Decimal;
                NumContributors = Default.Decimal;
                TopTier = new Tier();
                TopRankSize = Default.Decimal;
                PlayerInTopRank = Default.False;
                TierReached = Default.String;
                PlayerPercentileBand = Default.Decimal;
                Bonus = Default.Decimal;
            }

            public class Tier : Catch
            {
                public string Name { get; set; }
                public string Bonus { get; set; }

                public Tier()
                {
                    Name = Default.String;
                    Bonus = Default.String;
                }
            }
        }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == CommunityGoal)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.CommunityGoal>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
