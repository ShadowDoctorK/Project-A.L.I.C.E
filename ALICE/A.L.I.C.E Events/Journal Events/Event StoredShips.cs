//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-02T05:40:46Z", "event":"StoredShips", "StationName":"Morris Barracks", "MarketID":3524278272, "StarSystem":"Lambda Andromedae", "ShipsHere":[  ], "ShipsRemote":[ { "ShipID":0, "ShipType":"Asp", "ShipType_Localised":"Asp Explorer", "StarSystem":"HR 8514", "ShipMarketID":3221503744, "TransferPrice":84995, "TransferTime":978, "Value":19655521, "Hot":false }, { "ShipID":5, "ShipType":"Anaconda", "Name":"Alexia", "StarSystem":"Nankul", "ShipMarketID":3221644800, "TransferPrice":475901, "TransferTime":885, "Value":127900211, "Hot":false }, { "ShipID":7, "ShipType":"Eagle", "StarSystem":"HR 8514", "ShipMarketID":3221503744, "TransferPrice":1191, "TransferTime":978, "Value":44800, "Hot":false }, { "ShipID":8, "ShipType":"Hauler", "StarSystem":"HR 8514", "ShipMarketID":3221503744, "TransferPrice":2616, "TransferTime":978, "Value":378252, "Hot":false }, { "ShipID":11, "ShipType":"Federation_Corvette", "ShipType_Localised":"Federal Corvette", "Name":"MORNINGSTAR", "StarSystem":"HR 8514", "ShipMarketID":3221503744, "TransferPrice":2902701, "TransferTime":978, "Value":679014823, "Hot":false }, { "ShipID":18, "ShipType":"Viper_MkIV", "ShipType_Localised":"Viper MkIV", "Name":"starfox", "StarSystem":"HR 8514", "ShipMarketID":3221503744, "TransferPrice":17232, "TransferTime":978, "Value":3798451, "Hot":false }, { "ShipID":28, "ShipType":"SideWinder", "Name":"suicidewinder", "StarSystem":"Run", "ShipMarketID":128027136, "TransferPrice":5275, "TransferTime":2176, "Value":373152, "Hot":false }, { "ShipID":32, "ShipType":"TypeX", "ShipType_Localised":"Alliance Chieftain", "StarSystem":"HR 8514", "ShipMarketID":3221503744, "TransferPrice":264827, "TransferTime":978, "Value":61737115, "Hot":false } ] }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;

namespace ALICE_Events
{
    public class Event_StoredShips : Event_Base
    {
        public Event_StoredShips()
        {
            Name = "StoredShips";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            //Custom Logic Here.

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            StoredShips Event = (StoredShips)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("StationName", Event.StationName.Variable());
            Variable_Craft("MarketID", Event.MarketID.Variable());
            Variable_Craft("StarSystem", Event.StarSystem.Variable());
            //Variable_Craft("ShipsHere", Event.ShipsHere.Variable());
            //Variable_Craft("ShipsRemote", Event.ShipsRemote.Variable());
            #endregion
        }
    }

    #region StoredShips Event
    public class StoredShips : Base
    {
        public string StationName { get; set; }
        public decimal MarketID { get; set; }
        public string StarSystem { get; set; }
        public List<Ship> ShipsHere { get; set; }
        public List<Ship> ShipsRemote { get; set; }

        public class Ship
        {
            public decimal ShipID { get; set; }
            public string ShipType { get; set; }
            public string ShipType_Localised { get; set; }
            public string Name { get; set; }
            public string StarSystem { get; set; }
            public decimal ShipMarketID { get; set; }
            public decimal TransferPrice { get; set; }
            public decimal TransferTime { get; set; }
            public decimal Value { get; set; }
            public bool Hot { get; set; }
            public bool InTransit { get; set; }
        }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == StoredShips)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.StoredShips>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
