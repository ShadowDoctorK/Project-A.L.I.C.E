//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-28T15:54:58Z", "event":"EscapeInterdiction", "Interdictor":"Colin McCulloch", "IsPlayer":false }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;

namespace ALICE_Events
{
    public class Event_EscapeInterdiction : Event_Base
    {
        public Event_EscapeInterdiction()
        {
            Name = "EscapeInterdiction";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            //Custom Logic Here.

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            EscapeInterdiction Event = (EscapeInterdiction)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("Interdictor", Event.Interdictor.Variable());
            Variable_Craft("IsPlayer", Event.IsPlayer.Variable());
            #endregion
        }
    }

    #region EscapeInterdiction Event
    public class EscapeInterdiction : Base
    {
        public string Interdictor { get; set; }
        public string Interdictor_Localised { get; set; }
        public bool IsPlayer { get; set; }

        public EscapeInterdiction()
        {
            Interdictor = Default.String;
            Interdictor_Localised = Default.String;
            IsPlayer = Default.False;
        }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == EscapeInterdiction)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.EscapeInterdiction>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
