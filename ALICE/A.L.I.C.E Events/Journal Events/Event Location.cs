//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-11-02T01:44:41Z", "event":"Location", "Docked":true, "MarketID":3230440960, "StationName":"Haxel Port", "StationType":"Bernal", "StarSystem":"LTT 15574", "SystemAddress":670149191105, "StarPos":[-55.93750,1.93750,63.59375], "SystemAllegiance":"Federation", "SystemEconomy":"$economy_Industrial;", "SystemEconomy_Localised":"Industrial", "SystemSecondEconomy":"$economy_Extraction;", "SystemSecondEconomy_Localised":"Extraction", "SystemGovernment":"$government_Democracy;", "SystemGovernment_Localised":"Democracy", "SystemSecurity":"$SYSTEM_SECURITY_high;", "SystemSecurity_Localised":"High Security", "Population":10712223, "Body":"Haxel Port", "BodyID":70, "BodyType":"Station", "Powers":[ "Zachary Hudson" ], "PowerplayState":"Controlled", "Factions":[ { "Name":"Democrats of LTT 15574", "FactionState":"Boom", "Government":"Democracy", "Influence":0.578422, "Allegiance":"Federation" }, { "Name":"LFT 1448 Independents", "FactionState":"None", "Government":"Democracy", "Influence":0.031968, "Allegiance":"Federation", "PendingStates":[ { "State":"Boom", "Trend":1 }, { "State":"Bust", "Trend":1 } ] }, { "Name":"Pilots Federation Local Branch", "FactionState":"None", "Government":"Democracy", "Influence":0.000000, "Allegiance":"PilotsFederation" }, { "Name":"Revolutionary Party of Chamunda", "FactionState":"None", "Government":"Democracy", "Influence":0.069930, "Allegiance":"Federation", "RecoveringStates":[ { "State":"Boom", "Trend":0 } ] }, { "Name":"LTT 15574 Regulatory State", "FactionState":"War", "Government":"Dictatorship", "Influence":0.028971, "Allegiance":"Independent", "PendingStates":[ { "State":"Boom", "Trend":1 } ] }, { "Name":"Gold United Systems", "FactionState":"War", "Government":"Corporate", "Influence":0.027972, "Allegiance":"Independent", "PendingStates":[ { "State":"Boom", "Trend":1 } ] }, { "Name":"LTT 15574 Holdings", "FactionState":"None", "Government":"Corporate", "Influence":0.098901, "Allegiance":"Federation", "PendingStates":[ { "State":"Boom", "Trend":1 } ], "RecoveringStates":[ { "State":"Election", "Trend":0 } ] }, { "Name":"LTT 15574 Focus", "FactionState":"Boom", "Government":"Dictatorship", "Influence":0.076923, "Allegiance":"Independent" }, { "Name":"Brotherhood of the Dragon", "FactionState":"None", "Government":"Corporate", "Influence":0.086913, "Allegiance":"Federation", "PendingStates":[ { "State":"Boom", "Trend":1 } ], "RecoveringStates":[ { "State":"Election", "Trend":0 } ] } ], "SystemFaction":"Democrats of LTT 15574", "FactionState":"Boom" }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;
using ALICE_EventLogic;

namespace ALICE_Events
{
    public class Event_Location : Event_Base
    {
        public Event_Location()
        {
            Name = "Location";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            Process.Location((Location)GetEvent());

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            Location Event = (Location)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("Docked", Event.Docked.Variable());
            Variable_Craft("MarketID", Event.MarketID.Variable());
            Variable_Craft("StationName", Event.StationName.Variable());
            Variable_Craft("StationType", Event.StationType.Variable());
            Variable_Craft("StarSystem", Event.StarSystem.Variable());
            Variable_Craft("SystemAddress", Event.SystemAddress.Variable());
            //Variable_Craft("StarPos", Event.StarPos.Variable());
            Variable_Craft("SystemAllegiance", Event.SystemAllegiance.Variable());
            Variable_Craft("SystemEconomy", Event.SystemEconomy.Variable());
            Variable_Craft("SystemEconomy_Localised", Event.SystemEconomy_Localised.Variable());
            Variable_Craft("SystemSecondEconomy", Event.SystemSecondEconomy.Variable());
            Variable_Craft("SystemSecondEconomy_Localised", Event.SystemSecondEconomy_Localised.Variable());
            Variable_Craft("SystemGovernment", Event.SystemGovernment.Variable());
            Variable_Craft("SystemGovernment_Localised", Event.SystemGovernment_Localised.Variable());
            Variable_Craft("SystemSecurity", Event.SystemSecurity.Variable());
            Variable_Craft("SystemSecurity_Localised", Event.SystemSecurity_Localised.Variable());
            Variable_Craft("Population", Event.Population.Variable());
            Variable_Craft("Body", Event.Body.Variable());
            Variable_Craft("BodyID", Event.BodyID.Variable());
            Variable_Craft("BodyType", Event.BodyType.Variable());
            //Variable_Craft("Powers", Event.Powers.Variable());
            Variable_Craft("PowerplayState", Event.PowerplayState.Variable());
            //Variable_Craft("Factions", Event.Factions.Variable());
            Variable_Craft("SystemFaction", Event.SystemFaction.Variable());
            Variable_Craft("FactionState", Event.FactionState.Variable());
            #endregion
        }
    }

    #region Location Event
    public class Location : Base
    {
        public decimal Latitude { get; set; }
        public decimal Longitude { get; set; }
        public bool Docked { get; set; }
        public decimal MarketID { get; set; }
        public string StationName { get; set; }
        public string StationType { get; set; }
        public string StarSystem { get; set; }
        public decimal SystemAddress { get; set; }
        public List<decimal> StarPos { get; set; }
        public string SystemAllegiance { get; set; }
        public string SystemEconomy { get; set; }
        public string SystemEconomy_Localised { get; set; }
        public string SystemSecondEconomy { get; set; }
        public string SystemSecondEconomy_Localised { get; set; }
        public string SystemGovernment { get; set; }
        public string SystemGovernment_Localised { get; set; }
        public string SystemSecurity { get; set; }
        public string SystemSecurity_Localised { get; set; }
        public decimal Population { get; set; }
        public string Body { get; set; }
        public decimal BodyID { get; set; }
        public string BodyType { get; set; }
        public List<string> Powers { get; set; }
        public string PowerplayState { get; set; }
        public List<Faction> Factions { get; set; }
        public string SystemFaction { get; set; }
        public string FactionState { get; set; }

        public Location()
        {
            Latitude = Default.Decimal;
            Longitude = Default.Decimal;
            Docked = Default.False;
            MarketID = Default.Decimal;
            StationName = Default.String;
            StationType = Default.String;
            StarSystem = Default.String;
            SystemAddress = Default.Decimal;
            StarPos = new List<decimal>();
            SystemAllegiance = Default.String;
            SystemEconomy = Default.String;
            SystemEconomy_Localised = Default.String;
            SystemSecondEconomy = Default.String;
            SystemSecondEconomy_Localised = Default.String;
            SystemSecurity = Default.String;
            SystemSecurity_Localised = Default.String;
            Population = Default.Decimal;
            Body = Default.String;
            BodyID = Default.Decimal;
            BodyType = Default.String;
            Powers = new List<string>();
            PowerplayState = Default.String;
            Factions = new List<Faction>();
            SystemFaction = Default.String;
            FactionState = Default.String;
        }

        public class Faction : Catch
        {
            public string Name { get; set; }
            public string FactionState { get; set; }
            public string Government { get; set; }
            public decimal Influence { get; set; }
            public string Allegiance { get; set; }
            public List<States> PendingStates { get; set; }
            public List<States> RecoveringStates { get; set; }

            public Faction()
            {
                Name = Default.String;
                FactionState = Default.String;
                Government = Default.String;
                Influence = Default.Decimal;
                Allegiance = Default.String;
                PendingStates = new List<States>();
                RecoveringStates = new List<States>();
            }

            public class States : Catch
            {
                public string State { get; set; }
                public decimal Trend { get; set; }

                public States()
                {
                    State = Default.String;
                    Trend = Default.Decimal;
                }
            }
        }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == Location)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.Location>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
