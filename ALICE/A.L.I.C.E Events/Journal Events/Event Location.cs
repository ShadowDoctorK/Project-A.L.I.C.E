//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2019-01-25T22:02:06Z", "event":"Location", "Docked":true, "StationName":"Haxel Port", "StationType":"Bernal", "MarketID":3230440960, "StationFaction":{ "Name":"Democrats of LTT 15574", "FactionState":"Investment" }, "StationGovernment":"$government_Democracy;", "StationGovernment_Localised":"Democracy", "StationAllegiance":"Federation", "StationServices":[ "Dock", "Autodock", "BlackMarket", "Commodities", "Contacts", "Exploration", "Missions", "Outfitting", "CrewLounge", "Rearm", "Refuel", "Repair", "Shipyard", "Tuning", "Workshop", "MissionsGenerated", "FlightController", "StationOperations", "Powerplay", "SearchAndRescue", "MaterialTrader", "StationMenu" ], "StationEconomy":"$economy_Industrial;", "StationEconomy_Localised":"Industrial", "StationEconomies":[ { "Name":"$economy_Industrial;", "Name_Localised":"Industrial", "Proportion":0.770000 }, { "Name":"$economy_Extraction;", "Name_Localised":"Extraction", "Proportion":0.230000 } ], "StarSystem":"LTT 15574", "SystemAddress":670149191105, "StarPos":[-55.93750,1.93750,63.59375], "SystemAllegiance":"Federation", "SystemEconomy":"$economy_Industrial;", "SystemEconomy_Localised":"Industrial", "SystemSecondEconomy":"$economy_Extraction;", "SystemSecondEconomy_Localised":"Extraction", "SystemGovernment":"$government_Democracy;", "SystemGovernment_Localised":"Democracy", "SystemSecurity":"$SYSTEM_SECURITY_high;", "SystemSecurity_Localised":"High Security", "Population":10712223, "Body":"Haxel Port", "BodyID":70, "BodyType":"Station", "Factions":[ { "Name":"Democrats of LTT 15574", "FactionState":"Investment", "Government":"Democracy", "Influence":0.263736, "Allegiance":"Federation", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":100.000000, "ActiveStates":[ { "State":"Investment" } ] }, { "Name":"LFT 1448 Independents", "FactionState":"None", "Government":"Democracy", "Influence":0.300699, "Allegiance":"Federation", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":100.000000, "RecoveringStates":[ { "State":"War", "Trend":0 } ] }, { "Name":"Pilots Federation Local Branch", "FactionState":"None", "Government":"Democracy", "Influence":0.000000, "Allegiance":"PilotsFederation", "Happiness":"", "MyReputation":50.096100 }, { "Name":"Revolutionary Party of Chamunda", "FactionState":"None", "Government":"Democracy", "Influence":0.102897, "Allegiance":"Federation", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":100.000000, "PendingStates":[ { "State":"War", "Trend":0 } ] }, { "Name":"LTT 15574 Regulatory State", "FactionState":"None", "Government":"Dictatorship", "Influence":0.018981, "Allegiance":"Independent", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":3.000000 }, { "Name":"Gold United Systems", "FactionState":"None", "Government":"Corporate", "Influence":0.102897, "Allegiance":"Independent", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":23.553699, "PendingStates":[ { "State":"War", "Trend":0 } ] }, { "Name":"LTT 15574 Holdings", "FactionState":"None", "Government":"Corporate", "Influence":0.080919, "Allegiance":"Federation", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":100.000000, "RecoveringStates":[ { "State":"War", "Trend":0 } ] }, { "Name":"LTT 15574 Focus", "FactionState":"None", "Government":"Dictatorship", "Influence":0.056943, "Allegiance":"Independent", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":5.103000 }, { "Name":"Brotherhood of the Dragon", "FactionState":"None", "Government":"Corporate", "Influence":0.072927, "Allegiance":"Federation", "Happiness":"$Faction_HappinessBand2;", "Happiness_Localised":"Happy", "MyReputation":18.226601 } ], "SystemFaction":{ "Name":"Democrats of LTT 15574", "FactionState":"Investment" } }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;
using ALICE_EventLogic;

namespace ALICE_Events
{
    public class Event_Location : Event_Base
    {
        public Event_Location()
        {
            Name = "Location";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            Process.Location((Location)GetEvent());

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            Location Event = (Location)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables

            #endregion
        }
    }

    #region Location Event
    public class Location : Base
    {
        //Docked State
        public bool Docked { get; set; }

        //Position Data
        public decimal Latitude { get; set; }
        public decimal Longitude { get; set; }

        //Station Data
        public string StationName { get; set; }
        public string StationType { get; set; }
        public decimal MarketID { get; set; }
        public FactionData StationFaction { get; set; }
        public string StationGovernment { get; set; }
        public string StationGovernment_Localised { get; set; }
        public string StationAllegiance { get; set; }
        public List<string> StationServices { get; set; }
        public string StationEconomy { get; set; }
        public string StationEconomy_Localised { get; set; }
        public List<EconomyData> StationEconomies { get; set; }

        //System Data
        public string StarSystem { get; set; }
        public decimal SystemAddress { get; set; }
        public List<decimal> StarPos { get; set; }
        public string SystemAllegiance { get; set; }
        public string SystemEconomy { get; set; }
        public string SystemEconomy_Localised { get; set; }
        public string SystemSecondEconomy { get; set; }
        public string SystemSecondEconomy_Localised { get; set; }
        public string SystemGovernment { get; set; }
        public string SystemGovernment_Localised { get; set; }
        public string SystemSecurity { get; set; }
        public string SystemSecurity_Localised { get; set; }
        public decimal Population { get; set; }
        public string Body { get; set; }
        public decimal BodyID { get; set; }
        public string BodyType { get; set; }
        public List<Faction> Factions { get; set; }
        public FactionData SystemFaction { get; set; }
        public List<string> Powers { get; set; }
        public string PowerplayState { get; set; }

        public Location()
        {
            //Docked State
            Docked = Default.False;

            //Position Data
            Latitude = Default.Decimal;
            Longitude = Default.Decimal;

            //Station Data
            StationName = Default.String;
            StationType = Default.String;
            MarketID = Default.Decimal;
            StationFaction = new FactionData();
            StationGovernment = Default.String;
            StationGovernment_Localised = Default.String;
            StationAllegiance = Default.String;
            StationServices = new List<string>();
            StationEconomy = Default.String;
            StationEconomy_Localised = Default.String;
            StationEconomies = new List<EconomyData>();

            //System Data
            StarSystem = Default.String;
            SystemAddress = Default.Decimal;
            StarPos = new List<decimal>();
            SystemAllegiance = Default.String;
            SystemEconomy = Default.String;
            SystemEconomy_Localised = Default.String;
            SystemSecondEconomy = Default.String;
            SystemSecondEconomy_Localised = Default.String;
            SystemGovernment = Default.String;
            SystemGovernment_Localised = Default.String;
            SystemSecurity = Default.String;
            SystemSecurity_Localised = Default.String;
            Population = Default.Decimal;
            Body = Default.String;
            BodyID = Default.Decimal;
            BodyType = Default.String;
            Factions = new List<Faction>();
            SystemFaction = new FactionData();
            Powers = new List<string>();
            PowerplayState = Default.String;
        }

        public class Faction : Catch
        {
            public string Name { get; set; }
            public string FactionState { get; set; }
            public string Government { get; set; }
            public decimal Influence { get; set; }
            public string Allegiance { get; set; }
            public string Happiness { get; set; }
            public string Happiness_Localised { get; set; }
            public decimal MyReputation { get; set; }
            public List<States> ActiveStates { get; set; }
            public List<States> RecoveringStates { get; set; }
            public List<States> PendingStates { get; set; }

            public Faction()
            {
                Name = Default.String;
                FactionState = Default.String;
                Government = Default.String;
                Influence = Default.Decimal;
                Allegiance = Default.String;
                Happiness = Default.String;
                Happiness_Localised = Default.String;
                MyReputation = Default.Decimal;
                ActiveStates = new List<States>();
                PendingStates = new List<States>();
                RecoveringStates = new List<States>();
            }
        }

        public class EconomyData : Catch
        {
            public string Name { get; set; }
            public string Name_Localised { get; set; }
            public decimal Proportion { get; set; }

            public EconomyData()
            {
                Name = Default.String;
                Name_Localised = Default.String;
                Proportion = Default.Decimal;
            }
        }

        public class FactionData : Catch
        {
            public string Name { get; set; }
            public string FactionState { get; set; }

            public FactionData()
            {
                Name = Default.String;
                FactionState = Default.String;
            }
        }

        public class States : Catch
        {
            public string State { get; set; }
            public decimal Trend { get; set; }

            public States()
            {
                State = Default.String;
                Trend = Default.Decimal;
            }
        }  
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == Location)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.Location>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
