//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-02T05:39:17Z", "event":"DockingGranted", "LandingPad":10, "MarketID":3524278272, "StationName":"Morris Barracks", "StationType":"SurfaceStation" }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;
using ALICE_EventLogic;

namespace ALICE_Events
{
    public class Event_DockingGranted : Event_Base
    {
        public Event_DockingGranted()
        {
            Name = "DockingGranted";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            Process.DockingGranted((DockingGranted)GetEvent());

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            DockingGranted Event = (DockingGranted)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("LandingPad", Event.LandingPad.Variable());
            Variable_Craft("MarketID", Event.MarketID.Variable());
            Variable_Craft("StationName", Event.StationName.Variable());
            Variable_Craft("StationType", Event.StationType.Variable());
            #endregion
        }
    }

    #region DockingGranted Event
    public class DockingGranted : Base
    {
        public decimal LandingPad { get; set; }
        public decimal MarketID { get; set; }
        public string StationName { get; set; }
        public string StationType { get; set; }

        public DockingGranted()
        {
            LandingPad = Default.Decimal;
            MarketID = Default.Decimal;
            StationName = Default.String;
            StationType = Default.String;
        }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == DockingGranted)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.DockingGranted>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
