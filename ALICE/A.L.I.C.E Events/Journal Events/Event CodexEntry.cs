//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/20/2018 9:56 PM
//Source Journal Line: { "timestamp":"2018-11-21T02:20:36Z", "event":"CodexEntry", "EntryID":1300502, "Name":"$Codex_Ent_TRF_High_Metal_Content_No_Atmos_Name;", "Name_Localised":"Terraformable", "SubCategory":"$Codex_SubCategory_Terrestrials;", "SubCategory_Localised":"Terrestrials", "Category":"$Codex_Category_StellarBodies;", "Category_Localised":"StellarBodies", "Region":"$Codex_RegionName_18;", "Region_Localised":"Inner Orion Spur", "System":"Col 173 Sector KY-Q d5-47", "SystemAddress":1, "IsNewEntry":true }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Actions;
using ALICE_Internal;
using ALICE_EventLogic;

namespace ALICE_Events
{
    public class Event_CodexEntry : Event_Base
    {
        public Event_CodexEntry()
        {
            Name = "CodexEntry";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            Process.CodexEntry((CodexEntry)GetEvent());

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            CodexEntry Event = (CodexEntry)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("EntryID", Event.EntryID.ToString());
            Variable_Craft("Name", Event.Name.ToString());
            Variable_Craft("Name_Localised", Event.Name_Localised.ToString());
            Variable_Craft("SubCategory", Event.SubCategory.ToString());
            Variable_Craft("SubCategory_Localised", Event.SubCategory_Localised.ToString());
            Variable_Craft("Category", Event.Category.ToString());
            Variable_Craft("Category_Localised", Event.Category_Localised.ToString());
            Variable_Craft("Region", Event.Region.ToString());
            Variable_Craft("Region_Localised", Event.Region_Localised.ToString());
            Variable_Craft("System", Event.System.ToString());
            Variable_Craft("SystemAddress", Event.SystemAddress.ToString());
            Variable_Craft("IsNewEntry", Event.IsNewEntry.ToString());
            #endregion
        }
    }

    #region CodexEntry Event
    public class CodexEntry : Base
    {
        public decimal SystemAddress { get; set; }
        public decimal EntryID { get; set; }
        public bool IsNewEntry { get; set; }
        public decimal VoucherAmount { get; set; }
        public string Name { get; set; }
        public string Name_Localised { get; set; }
        public string SubCategory { get; set; }
        public string SubCategory_Localised { get; set; }
        public string Category { get; set; }
        public string Category_Localised { get; set; }
        public string Region { get; set; }
        public string Region_Localised { get; set; }
        public string System { get; set; }

        public CodexEntry()
        {
            EntryID = Default.Decimal;
            SystemAddress = Default.Decimal;
            Name = Default.String;
            Name_Localised = Default.String;
            SubCategory = Default.String;
            SubCategory_Localised = Default.String;
            Category = Default.String;
            Category_Localised = Default.String;
            Region = Default.String;
            Region_Localised = Default.String;
            System = Default.String;
            IsNewEntry = Default.False;
            VoucherAmount = Default.Decimal;
        }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == "CodexEntry")
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.CodexEntry>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
