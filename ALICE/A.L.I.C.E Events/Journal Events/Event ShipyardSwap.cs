//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-09T20:03:41Z", "event":"ShipyardSwap", "ShipType":"federation_corvette", "ShipType_Localised":"Federal Corvette", "ShipID":11, "StoreOldShip":"Krait_MkII", "StoreShipID":29, "MarketID":3221503744 }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;

namespace ALICE_Events
{
    public class Event_ShipyardSwap : Event_Base
    {
        public Event_ShipyardSwap()
        {
            Name = "ShipyardSwap";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            //Custom Logic Here.

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            ShipyardSwap Event = (ShipyardSwap)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("ShipType", Event.ShipType.Variable());
            Variable_Craft("ShipType_Localised", Event.ShipType_Localised.Variable());
            Variable_Craft("ShipID", Event.ShipID.Variable());
            Variable_Craft("StoreOldShip", Event.StoreOldShip.Variable());
            Variable_Craft("StoreShipID", Event.StoreShipID.Variable());
            Variable_Craft("MarketID", Event.MarketID.Variable());
            #endregion
        }
    }

    #region ShipyardSwap Event
    public class ShipyardSwap : Base
    {
        public string ShipType { get; set; }
        public string ShipType_Localised { get; set; }
        public decimal ShipID { get; set; }
        public string StoreOldShip { get; set; }
        public decimal StoreShipID { get; set; }
        public decimal MarketID { get; set; }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == ShipyardSwap)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.ShipyardSwap>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
