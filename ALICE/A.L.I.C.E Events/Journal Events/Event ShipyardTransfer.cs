//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-14T04:06:20Z", "event":"ShipyardTransfer", "ShipType":"Anaconda", "ShipID":5, "System":"Nankul", "ShipMarketID":3221644800, "Distance":10.294160, "TransferPrice":105577, "TransferTime":402, "MarketID":3221503744 }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;
using ALICE_EventLogic;

namespace ALICE_Events
{
    public class Event_ShipyardTransfer : Event_Base
    {
        public Event_ShipyardTransfer()
        {
            Name = "ShipyardTransfer";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            Process.ShipyardTransfer((ShipyardTransfer)GetEvent());

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            ShipyardTransfer Event = (ShipyardTransfer)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("ShipType", Event.ShipType.Variable());
            Variable_Craft("ShipType_Localised", Event.ShipType_Localised.Variable());
            Variable_Craft("ShipID", Event.ShipID.Variable());
            Variable_Craft("System", Event.System.Variable());
            Variable_Craft("ShipMarketID", Event.ShipMarketID.Variable());
            Variable_Craft("Distance", Event.Distance.Variable());
            Variable_Craft("TransferPrice", Event.TransferPrice.Variable());
            Variable_Craft("TransferTime", Event.TransferTime.Variable());
            Variable_Craft("MarketID", Event.MarketID.Variable());
            #endregion
        }
    }

    #region ShipyardTransfer Event
    public class ShipyardTransfer : Base
    {
        public string ShipType { get; set; }
        public string ShipType_Localised { get; set; }
        public decimal ShipID { get; set; }
        public string System { get; set; }
        public decimal ShipMarketID { get; set; }
        public decimal Distance { get; set; }
        public decimal TransferPrice { get; set; }
        public decimal TransferTime { get; set; }
        public decimal MarketID { get; set; }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == ShipyardTransfer)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.ShipyardTransfer>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
