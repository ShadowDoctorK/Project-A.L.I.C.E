//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-22T00:11:26Z", "event":"CargoDepot", "MissionID":427614351, "UpdateType":"Deliver", "CargoType":"PerformanceEnhancers", "CargoType_Localised":"Performance Enhancers", "Count":584, "StartMarketID":0, "EndMarketID":3221503744, "ItemsCollected":0, "ItemsDelivered":584, "TotalItemsToDeliver":2061, "Progress":0.000000 }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;
using ALICE_EventLogic;

namespace ALICE_Events
{
    public class Event_CargoDepot : Event_Base
    {
        public Event_CargoDepot()
        {
            Name = "CargoDepot";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            Process.CargoDepot((CargoDepot)GetEvent());

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            CargoDepot Event = (CargoDepot)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("MissionID", Event.MissionID.Variable());
            Variable_Craft("UpdateType", Event.UpdateType.Variable());
            Variable_Craft("CargoType", Event.CargoType.Variable());
            Variable_Craft("CargoType_Localised", Event.CargoType_Localised.Variable());
            Variable_Craft("Count", Event.Count.Variable());
            Variable_Craft("StartMarketID", Event.StartMarketID.Variable());
            Variable_Craft("EndMarketID", Event.EndMarketID.Variable());
            Variable_Craft("ItemsCollected", Event.ItemsCollected.Variable());
            Variable_Craft("ItemsDelivered", Event.ItemsDelivered.Variable());
            Variable_Craft("TotalItemsToDeliver", Event.TotalItemsToDeliver.Variable());
            Variable_Craft("Progress", Event.Progress.Variable());
            #endregion
        }
    }

    #region CargoDepot Event
    public class CargoDepot : Base
    {
        public decimal MissionID { get; set; }
        public string UpdateType { get; set; }
        public string CargoType { get; set; }
        public string CargoType_Localised { get; set; }
        public decimal Count { get; set; }
        public decimal StartMarketID { get; set; }
        public decimal EndMarketID { get; set; }
        public decimal ItemsCollected { get; set; }
        public decimal ItemsDelivered { get; set; }
        public decimal TotalItemsToDeliver { get; set; }
        public decimal Progress { get; set; }

        public CargoDepot()
        {
            MissionID = Default.Decimal;
            UpdateType = Default.String;
            CargoType = Default.String;
            CargoType_Localised = Default.String;
            Count = Default.Decimal;
            StartMarketID = Default.Decimal;
            EndMarketID = Default.Decimal;
            ItemsCollected = Default.Decimal;
            ItemsDelivered = Default.Decimal;
            TotalItemsToDeliver = Default.Decimal;
            Progress = Default.Decimal;
        }
    }
    #endregion

}

//Journal Reader Code Chunk.

// else if (EventName == CargoDepot)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.CargoDepot>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
