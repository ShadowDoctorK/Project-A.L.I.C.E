//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 4:40 PM
//Source Journal Line: { "timestamp":"2018-09-16T11:42:22Z", "event":"EngineerContribution", "Engineer":"Elvira Martuuk", "EngineerID":300160, "Type":"Commodity", "Commodity":"soontillrelics", "Commodity_Localised":"Soontill Relics", "Quantity":3, "TotalQuantity":3 }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;

namespace ALICE_Events
{
    public class Event_EngineerContribution : Event_Base
    {
        public Event_EngineerContribution()
        {
            Name = "EngineerContribution";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            //Custom Logic Here.

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            EngineerContribution Event = (EngineerContribution)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("Engineer", Event.Engineer.ToString());
            Variable_Craft("EngineerID", Event.EngineerID.ToString());
            Variable_Craft("Type", Event.Type.ToString());
            Variable_Craft("Commodity", Event.Commodity.ToString());
            Variable_Craft("Commodity_Localised", Event.Commodity_Localised.ToString());
            Variable_Craft("Quantity", Event.Quantity.ToString());
            Variable_Craft("TotalQuantity", Event.TotalQuantity.ToString());
            #endregion
        }
    }

    #region EngineerContribution Event
    public class EngineerContribution : Base
    {
        public string Engineer { get; set; }
        public decimal EngineerID { get; set; }
        public string Type { get; set; }
        public string Commodity { get; set; }
        public string Commodity_Localised { get; set; }
        public decimal Quantity { get; set; }
        public decimal TotalQuantity { get; set; }

        public EngineerContribution()
        {
            Engineer = Default.String;
            EngineerID = Default.Decimal;
            Type = Default.String;
            Commodity = Default.String;
            Commodity_Localised = Default.String;
            Quantity = Default.Decimal;
            TotalQuantity = Default.Decimal;
        }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == "EngineerContribution")
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.EngineerContribution>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
