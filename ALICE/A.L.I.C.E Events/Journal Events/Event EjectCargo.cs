//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-22T01:01:36Z", "event":"EjectCargo", "Type":"consumertechnology", "Type_Localised":"Consumer Technology", "Count":1, "Abandoned":false }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;

namespace ALICE_Events
{
    public class Event_EjectCargo : Event_Base
    {
        public Event_EjectCargo()
        {
            Name = "EjectCargo";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            //Custom Logic Here.

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            EjectCargo Event = (EjectCargo)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("Type", Event.Type.Variable());
            Variable_Craft("Type_Localised", Event.Type_Localised.Variable());
            Variable_Craft("Count", Event.Count.Variable());
            Variable_Craft("Abandoned", Event.Abandoned.Variable());
            #endregion
        }
    }

    #region EjectCargo Event
    public class EjectCargo : Base
    {
        public string Type { get; set; }
        public string Type_Localised { get; set; }
        public decimal Count { get; set; }
        public string Abandoned { get; set; }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == EjectCargo)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.EjectCargo>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
