//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-11T20:57:31Z", "event":"CommitCrime", "CrimeType":"collidedAtSpeedInNoFireZone_hulldamage", "Faction":"Eureka Mining Co-Operative", "Fine":100 }
//Reference Journal Line: { "timestamp":"2018-11-22T01:47:10Z", "event":"CommitCrime", "CrimeType":"dockingMinorBlockingAirlock", "Faction":"Eureka Mining Co-Operative", "Fine":300 }
//Reference Journal Line: { "timestamp":"2018-11-22T01:47:55Z", "event":"CommitCrime", "CrimeType":"dockingMinorBlockingLandingPad", "Faction":"Eureka Mining Co-Operative", "Fine":300 }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;
using ALICE_EventLogic;

namespace ALICE_Events
{
    public class Event_CommitCrime : Event_Base
    {
        public Event_CommitCrime()
        {
            Name = "CommitCrime";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            Process.CommitCrime((CommitCrime)GetEvent());

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            CommitCrime Event = (CommitCrime)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("CrimeType", Event.CrimeType.Variable());
            Variable_Craft("Faction", Event.Faction.Variable());
            Variable_Craft("Victim", Event.Victim.Variable());
            Variable_Craft("Victim_Localised", Event.Victim_Localised.Variable());
            Variable_Craft("Fine", Event.Fine.Variable());
            Variable_Craft("Bounty", Event.Bounty.Variable());
            #endregion
        }
    }

    #region CommitCrime Event
    public class CommitCrime : Base
    {
        public string CrimeType { get; set; }
        public string Faction { get; set; }
        public string Victim { get; set; }
        public string Victim_Localised { get; set; }
        public decimal Fine { get; set; }
        public decimal Bounty { get; set; }

        public CommitCrime()
        {
            CrimeType = Default.String;
            Faction = Default.String;
            Victim = Default.String;
            Victim_Localised = Default.String;
            Fine = Default.Decimal;
            Bounty = Default.Decimal;
        }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == CommitCrime)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.CommitCrime>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
