//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-28T17:03:33Z", "event":"Docked", "StationName":"Tyson Gateway", "StationType":"Coriolis", "StarSystem":"LTT 16548", "SystemAddress":594576132459, "MarketID":3221506816, "StationFaction":"Cavalry Command of Yuma", "FactionState":"CivilUnrest", "StationGovernment":"$government_Confederacy;", "StationGovernment_Localised":"Confederacy", "StationAllegiance":"Federation", "StationServices":[ "Dock", "Autodock", "BlackMarket", "Commodities", "Contacts", "Exploration", "Missions", "Outfitting", "CrewLounge", "Rearm", "Refuel", "Repair", "Shipyard", "Tuning", "Workshop", "MissionsGenerated", "Facilitator", "FlightController", "StationOperations", "Powerplay", "SearchAndRescue", "MaterialTrader" ], "StationEconomy":"$economy_HighTech;", "StationEconomy_Localised":"High Tech", "StationEconomies":[ { "Name":"$economy_HighTech;", "Name_Localised":"High Tech", "Proportion":0.800000 }, { "Name":"$economy_Refinery;", "Name_Localised":"Refinery", "Proportion":0.200000 } ], "DistFromStarLS":3179.510986 }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;
using ALICE_EventLogic;

namespace ALICE_Events
{
    public class Event_Docked : Event_Base
    {
        public Event_Docked()
        {
            Name = "Docked";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            Process.Docked((Docked)GetEvent());

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            Docked Event = (Docked)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("StationName", Event.StationName.Variable());
            Variable_Craft("StationType", Event.StationType.Variable());
            Variable_Craft("StarSystem", Event.StarSystem.Variable());
            Variable_Craft("SystemAddress", Event.SystemAddress.Variable());
            Variable_Craft("MarketID", Event.MarketID.Variable());
            Variable_Craft("StationFaction", Event.StationFaction.Variable());
            Variable_Craft("FactionState", Event.FactionState.Variable());
            Variable_Craft("StationGovernment", Event.StationGovernment.Variable());
            Variable_Craft("StationGovernment_Localised", Event.StationGovernment_Localised.Variable());
            Variable_Craft("StationAllegiance", Event.StationAllegiance.Variable());
            //Variable_Craft("StationServices", Event.StationServices.Variable());
            Variable_Craft("StationEconomy", Event.StationEconomy.Variable());
            Variable_Craft("StationEconomy_Localised", Event.StationEconomy_Localised.Variable());
            //Variable_Craft("StationEconomies", Event.StationEconomies.Variable());
            Variable_Craft("DistFromStarLS", Event.DistFromStarLS.Variable());
            Variable_Craft("CockpitBreach", Event.CockpitBreach.Variable());
            #endregion
        }
    }

    #region Docked Event
    public class Docked : Base
    {
        public string StationName { get; set; }
        public string StationType { get; set; }
        public string StarSystem { get; set; }
        public decimal SystemAddress { get; set; }
        public decimal MarketID { get; set; }
        public string StationFaction { get; set; }
        public string FactionState { get; set; }
        public string StationGovernment { get; set; }
        public string StationGovernment_Localised { get; set; }
        public string StationAllegiance { get; set; }
        public List<string> StationServices { get; set; }
        public string StationEconomy { get; set; }
        public string StationEconomy_Localised { get; set; }
        public List<StationEco> StationEconomies { get; set; }
        public decimal DistFromStarLS { get; set; }
        public bool CockpitBreach { get; set; }
        public bool Wanted { get; set; }
        public bool ActiveFine { get; set; }

        public Docked()
        {
            StationName = Default.String;
            StationType = Default.String;
            StarSystem = Default.String;
            SystemAddress = Default.Decimal;
            MarketID = Default.Decimal;
            StationFaction = Default.String;
            StationGovernment = Default.String;
            StationGovernment_Localised = Default.String;
            StationAllegiance = Default.Independant;
            StationServices = new List<string>();
            StationEconomy = Default.String;
            StationEconomy_Localised = Default.String;
            StationEconomies = new List<StationEco>();
            DistFromStarLS = Default.Decimal;
            CockpitBreach = Default.False;
            Wanted = Default.False;
            ActiveFine = Default.False;
        }

        public class StationEco
        {
            public string Name { get; set; }
            public string Name_Localised { get; set; }
            public decimal Proportion { get; set; }

            public StationEco()
            {
                Name = Default.String;
                Name_Localised = Default.String;
                Proportion = Default.Decimal;
            }
        }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == Docked)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.Docked>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
