//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-02T04:19:19Z", "event":"HullDamage", "Health":0.728289, "PlayerPilot":false, "Fighter":true }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;
using ALICE_EventLogic;

namespace ALICE_Events
{
    public class Event_HullDamage : Event_Base
    {
        public Event_HullDamage()
        {
            Name = "HullDamage";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            Process.HullDamage((HullDamage)GetEvent());

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            HullDamage Event = (HullDamage)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("Health", Event.Health.Variable());
            Variable_Craft("PlayerPilot", Event.PlayerPilot.Variable());
            Variable_Craft("Fighter", Event.Fighter.Variable());
            #endregion
        }
    }

    #region HullDamage Event
    public class HullDamage : Base
    {
        public decimal Health { get; set; }
        public bool PlayerPilot { get; set; }
        public bool Fighter { get; set; }

        public HullDamage()
        {
            Health = Default.Decimal;
            PlayerPilot = Default.False;
            Fighter = Default.False;
        }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == HullDamage)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.HullDamage>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
