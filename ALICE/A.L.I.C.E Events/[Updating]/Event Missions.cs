//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-30T02:29:20Z", "event":"Missions", "Active":[ { "MissionID":425812062, "Name":"Mission_TheDead_name", "PassengerMission":false, "Expires":0 }, { "MissionID":429236792, "Name":"Mission_Collect_CivilUnrest_name", "PassengerMission":false, "Expires":0 }, { "MissionID":429236850, "Name":"Mission_Collect_CivilUnrest_name", "PassengerMission":false, "Expires":0 }, { "MissionID":429329450, "Name":"Mission_Massacre_Conflict_War_name", "PassengerMission":false, "Expires":0 }, { "MissionID":429329461, "Name":"Mission_Massacre_Conflict_War_name", "PassengerMission":false, "Expires":0 }, { "MissionID":429329471, "Name":"Mission_Massacre_Conflict_War_name", "PassengerMission":false, "Expires":0 }, { "MissionID":429329481, "Name":"Mission_Massacre_Conflict_War_name", "PassengerMission":false, "Expires":0 }, { "MissionID":429329489, "Name":"Mission_Massacre_Conflict_War_name", "PassengerMission":false, "Expires":0 } ], "Failed":[  ], "Complete":[  ] }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;

namespace ALICE_Events
{
    public class Event_Missions : Event_Base
    {
        public Event_Missions()
        {
            Name = "Missions";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            //Custom Logic Here.

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            Missions Event = (Missions)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            //Variable_Craft("Active", Event.Active.Variable());
            //Variable_Craft("Failed", Event.Failed.Variable());
            //Variable_Craft("Complete", Event.Complete.Variable());
            #endregion
        }
    }

    #region Missions Event
    public class Missions : Base
    {
        public List<Mission> Active { get; set; }
        public List<Mission> Failed { get; set; }
        public List<Mission> Complete { get; set; }

        public class Mission : Catch
        {
            public decimal MissionID { get; set; }
            public string Name { get; set; }
            public bool PassengerMission { get; set; }
            public decimal Expires { get; set; }
        }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == Missions)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.Missions>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
