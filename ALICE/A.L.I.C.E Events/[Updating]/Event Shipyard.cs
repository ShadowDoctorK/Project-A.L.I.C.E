//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-02T05:40:46Z", "event":"Shipyard", "MarketID":3524278272, "StationName":"Morris Barracks", "StarSystem":"Lambda Andromedae" }
//Source Shipyard.Json:
/*
{ "timestamp":"2018-12-22T01:49:12Z", "event":"Shipyard", "MarketID":3221503744, "StationName":"Hennen Station", "StarSystem":"HR 8514", "Horizons":true, "AllowCobraMkIV":false, "PriceList":[ 
{ "id":128049249, "ShipType":"sidewinder", "ShipPrice":32000 }, 
{ "id":128049255, "ShipType":"eagle", "ShipPrice":44800 }, 

(Deteled Body / Example)

{ "id":128816567, "ShipType":"krait_mkii", "ShipType_Localised":"Krait Mk II", "ShipPrice":45814205 }, 
{ "id":128049333, "ShipType":"type9", "ShipType_Localised":"Type-9 Heavy", "ShipPrice":76555842 }
 ] } 
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;

namespace ALICE_Events
{
    public class Event_Shipyard : Event_Base
    {
        public Event_Shipyard()
        {
            Name = "Shipyard";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            //Custom Logic Here.

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            Shipyard Event = (Shipyard)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("MarketID", Event.MarketID.Variable());
            Variable_Craft("StationName", Event.StationName.Variable());
            Variable_Craft("StarSystem", Event.StarSystem.Variable());
            #endregion
        }
    }

    #region Shipyard Event
    /// <summary>
    /// Event Shared Between Shipyard.Json & Journal Log
    /// </summary>
    public class Shipyard : Base
    {
        //Shared Properties
        public decimal MarketID { get; set; }
        public string StationName { get; set; }
        public string StarSystem { get; set; }

        //Shipyard.Json Properties
        public bool Horizons { get; set; }
        public bool AllowCobraMkIV { get; set; }
        public List<PriceList> PriceList { get; set; }

        public Shipyard()
        {
            MarketID = Default.Decimal;
            StationName = Default.String;
            StarSystem = Default.String;
            Horizons = Default.False;
            AllowCobraMkIV = Default.False;
            PriceList = new List<PriceList>();
        }
    }

    public class PriceList
    {
        public decimal id { get; set; }
        public string ShipType { get; set; }
        public decimal ShipPrice { get; set; }
        public string ShipType_Localised { get; set; }

        public PriceList()
        {
            id = Default.Decimal;
            ShipType = Default.String;
            ShipPrice = Default.Decimal;
            ShipType_Localised = Default.String;
        }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == Shipyard)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.Shipyard>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
