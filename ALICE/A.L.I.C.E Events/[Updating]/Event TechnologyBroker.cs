//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-11T20:21:58Z", "event":"TechnologyBroker", "BrokerType":"guardian", "MarketID":3223415296, "ItemsUnlocked":[ { "Name":"Int_GuardianFSDBooster_Size1", "Name_Localised":"Guardian FSD Booster" }, { "Name":"Int_GuardianFSDBooster_Size2", "Name_Localised":"$Int_GuardianFSDBooster_Size1_Name;" }, { "Name":"Int_GuardianFSDBooster_Size3", "Name_Localised":"$Int_GuardianFSDBooster_Size1_Name;" }, { "Name":"Int_GuardianFSDBooster_Size4", "Name_Localised":"$Int_GuardianFSDBooster_Size1_Name;" }, { "Name":"Int_GuardianFSDBooster_Size5", "Name_Localised":"$Int_GuardianFSDBooster_Size1_Name;" } ], "Commodities":[ { "Name":"hnshockmount", "Name_Localised":"HN Shock Mount", "Count":8 } ], "Materials":[ { "Name":"guardian_moduleblueprint", "Name_Localised":"Guardian Module Blueprint Segment", "Count":1, "Category":"Encoded" }, { "Name":"guardian_powercell", "Name_Localised":"Guardian Power Cell", "Count":21, "Category":"Manufactured" }, { "Name":"guardian_techcomponent", "Name_Localised":"Guardian Technology Component", "Count":21, "Category":"Manufactured" }, { "Name":"focuscrystals", "Name_Localised":"Focus Crystals", "Count":24, "Category":"Manufactured" } ] }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;

namespace ALICE_Events
{
    public class Event_TechnologyBroker : Event_Base
    {
        public Event_TechnologyBroker()
        {
            Name = "TechnologyBroker";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            //Custom Logic Here.

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            TechnologyBroker Event = (TechnologyBroker)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("BrokerType", Event.BrokerType.Variable());
            Variable_Craft("MarketID", Event.MarketID.Variable());
            //Variable_Craft("ItemsUnlocked", Event.ItemsUnlocked.Variable());
            //Variable_Craft("Commodities", Event.Commodities.Variable());
            //Variable_Craft("Materials", Event.Materials.Variable());
            #endregion
        }
    }

    #region TechnologyBroker Event
    public class TechnologyBroker : Base
    {
        public string BrokerType { get; set; }
        public decimal MarketID { get; set; }
        public List<ItemUnlock> ItemsUnlocked { get; set; }
        public List<Commoditie> Commodities { get; set; }
        public List<Material> Materials { get; set; }

        public class ItemUnlock
        {
            public string Name { get; set; }
            public string Name_Localised { get; set; }
        }

        public class Commoditie
        {
            public string Name { get; set; }
            public string Name_Localised { get; set; }
            public int Count { get; set; }
        }

        public class Material
        {
            public string Name { get; set; }
            public string Name_Localised { get; set; }
            public int Count { get; set; }
            public string Category { get; set; }
        }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == TechnologyBroker)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.TechnologyBroker>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
