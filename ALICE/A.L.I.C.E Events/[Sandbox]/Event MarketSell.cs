//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-07T12:07:24Z", "event":"MarketSell", "MarketID":3229975040, "Type":"insulatingmembrane", "Type_Localised":"Insulating Membrane", "Count":201, "SellPrice":7516, "TotalSale":1510716, "AvgPricePaid":10684 }

using ALICE_Core;
using System;

namespace ALICE_Events
{
    /// <summary>
    /// Object Data Class
    /// </summary>
    public class ASDF_MarketSell : Base
    {
        public decimal MarketID { get; set; }
        public string Type { get; set; }
        public string Type_Localised { get; set; }
        public decimal Count { get; set; }
        public decimal SellPrice { get; set; }
        public decimal TotalSale { get; set; }
        public decimal AvgPricePaid { get; set; }

        //Default Constructor
        public ASDF_MarketSell()
        {
            MarketID = Dec();
            Type = Str();
            Type_Localised = Str();
            Count = Dec();
            SellPrice = Dec();
            TotalSale = Dec();
            AvgPricePaid = Dec();
        }
    }

    /// <summary>
    /// Event Logic & Data Storage Class
    /// </summary>
    public class QWER_MarketSell : Event
    {
        //Variable Generation
        public override void Generate(object O)
        {
            try
            {
                var Event = (MarketSell)O;

                Variables.Record(Name + "_Market", Event.MarketID);
                Variables.Switch(Name + "_Item", Event.Type_Localised, Event.Type);
                Variables.Record(Name + "_Count", Event.Count);
                Variables.Record(Name + "_UnitPrice", Event.SellPrice);
                Variables.Record(Name + "_AvgPrice", Event.AvgPricePaid);
                Variables.Record(Name + "_Credits", Event.TotalSale);
            }
            catch (Exception ex)
            {
                ExceptionGenerate(ex);
            }
        }

        //Plugin Logic Process
        public override void Process(object O)
        {
            try
            {
                var Event = (MarketSell)O;
            }
            catch (Exception ex)
            {
                ExceptionProcess(ex);
            }
        }

        //Plugin Property Aligment
        public override void Alignment()
        {
            IStatus.Docking.Docked = true;
            IStatus.LandingGear = true;
            IStatus.Planet.OrbitalMode = false;
            IStatus.Planet.DecentReport = false;
            IStatus.Supercruise = false;
            IStatus.Hyperspace = false;
            IStatus.Touchdown = false;
            IStatus.CargoScoop = false;
            IStatus.Fighter.Deployed = false;
            IStatus.Hardpoints = false;
        }
    }
}