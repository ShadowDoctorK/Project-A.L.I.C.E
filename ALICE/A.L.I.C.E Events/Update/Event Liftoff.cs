//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-15T03:11:17Z", "event":"Liftoff", "PlayerControlled":true, "Latitude":-15.108140, "Longitude":-102.934616 }

using ALICE_Core;
using System;

namespace ALICE_Events
{
    /// <summary>
    /// Object Data Class
    /// </summary>
    public class Liftoff : Base
    {
        public bool PlayerControlled { get; set; }
        public decimal Latitude { get; set; }
        public decimal Longitude { get; set; }

        //Default Constructor
        public Liftoff()
        {
            PlayerControlled = Bool();
            Latitude = Dec();
            Longitude = Dec();
        }
    }

    /// <summary>
    /// Event Logic & Data Storage Class
    /// </summary>
    public class Event_Liftoff : Event
    {
        //Variable Generation
        public override void Generate(object O)
        {
            try
            {
                var Event = (Liftoff)O;

                Variables.Switch(Name + "_Pilot", Event.PlayerControlled, "Commander", "NPC");
                Variables.Record(Name + "_Latitude", Event.Latitude);
                Variables.Record(Name + "_Longitude", Event.Longitude);
            }
            catch (Exception ex)
            {
                ExceptionGenerate(Name, ex);
            }
        }

        //Plugin Logic Process
        public override void Process(object O)
        {
            try
            {
                var Event = (Liftoff)O;

                //Update Status Object
                IStatus.Planet.Update(Event);
            }
            catch (Exception ex)
            {
                ExceptionProcess(Name, ex);
            }
        }

        //Plugin Property Aligment
        public override void Alignment(object O)
        {
            try
            {
                IStatus.WeaponSafety = false;
                IStatus.Touchdown = false;
                IStatus.Docking.Docked = false;
                IStatus.Hyperspace = false;
                IStatus.Supercruise = false;
            }
            catch (Exception ex)
            {
                ExceptionAlignment(Name, ex);
            }
        }
    }
}