//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-29T00:23:53Z", "event":"Interdicted", "Submitted":true, "Interdictor":"$ShipName_Military_Independent;", "Interdictor_Localised":"System Defence Force", "IsPlayer":false, "Faction":"The Fuel Rats Mischief" }

using ALICE_Status;
using System;

namespace ALICE_Events
{
    /// <summary>
    /// Object Data Class
    /// </summary>
    public class Interdicted : Base
    {
        public bool Submitted { get; set; }
        public string Interdictor { get; set; }
        public string Interdictor_Localised { get; set; }
        public bool IsPlayer { get; set; }
        public string Faction { get; set; }
        public decimal CombatRank { get; set; }

        //Default Constructor
        public Interdicted()
        {
            Submitted = Bool();
            Interdictor = Str();
            Interdictor_Localised = Str();
            IsPlayer = Bool();
            Faction = Str();
            CombatRank = Dec();
        }
    }

    /// <summary>
    /// Event Logic & Data Storage Class
    /// </summary>
    public class Event_Interdicted : Event
    {
        //Variable Generation
        public override void Generate(object O)
        {
            try
            {
                var Event = (Interdicted)O;

                Variables.Record(Name + "_Submitted", Event.Submitted);                
                Variables.Switch(Name + "_Pilot", Event.Interdictor_Localised, Event.Interdictor);
                Variables.Switch(Name + "_Type", Event.IsPlayer, "Commander", "NPC");
                Variables.Record(Name + "_Faction", Event.Faction);
                Variables.Record(Name + "_Rank", Event.CombatRank);
            }
            catch (Exception ex)
            {
                ExceptionGenerate(Name, ex);
            }
        }

        //Plugin Property Aligment
        public override void Alignment(object O)
        {
            try
            {
                IStatus.WeaponSafety = false;
                IStatus.Planet.OrbitalMode = false;
                IStatus.Planet.DecentReport = false;
                IStatus.Supercruise = false;
                IStatus.Hyperspace = false;
                IStatus.Touchdown = false;
                IStatus.Docking.Docked = false;
            }
            catch (Exception ex)
            {
                ExceptionAlignment(Name, ex);
            }
        }
    }
}