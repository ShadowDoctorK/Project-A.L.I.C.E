//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-09T20:03:41Z", "event":"ShipyardSwap", "ShipType":"federation_corvette", "ShipType_Localised":"Federal Corvette", "ShipID":11, "StoreOldShip":"Krait_MkII", "StoreShipID":29, "MarketID":3221503744 }

using ALICE_Status;
using System;

namespace ALICE_Events
{
    /// <summary>
    /// Object Data Class
    /// </summary>
    public class ShipyardSwap : Base
    {
        public string ShipType { get; set; }
        public string ShipType_Localised { get; set; }
        public decimal ShipID { get; set; }
        public string StoreOldShip { get; set; }
        public decimal StoreShipID { get; set; }
        public decimal MarketID { get; set; }

        //Default Constructor
        public ShipyardSwap()
        {
            ShipType = Str();
            ShipType_Localised = Str();
            ShipID = Dec();
            StoreOldShip = Str();
            StoreShipID = Dec();
            MarketID = Dec();
        }
    }

    /// <summary>
    /// Event Logic & Data Storage Class
    /// </summary>
    public class Event_ShipyardSwap : Event
    {
        //Variable Generation
        public override void Generate(object O)
        {
            try
            {
                var Event = (ShipyardSwap)O;

                Variables.Switch(Name + "_Type", Event.ShipType_Localised, Event.ShipType);
                Variables.Record(Name + "_ID", Event.ShipID);
                Variables.Record(Name + "_Market", Event.MarketID);                
                Variables.Record(Name + "_PreviousShipID", Event.StoreShipID);
                Variables.Record(Name + "_PreviousShip", Event.StoreOldShip);
            }
            catch (Exception ex)
            {
                ExceptionGenerate(Name, ex);
            }
        }

        //Plugin Logic Process
        public override void Process(object O)
        {
            try
            {
                var Event = (ShipyardSwap)O;

                //Update Status Object
                IStatus.Shipyard.Update(Event);
            }
            catch (Exception ex)
            {
                ExceptionProcess(Name, ex);
            }
        }
    }
}