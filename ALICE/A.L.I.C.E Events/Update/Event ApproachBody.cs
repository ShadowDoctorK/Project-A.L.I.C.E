//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-14T20:05:33Z", "event":"ApproachBody", "StarSystem":"Col 173 Sector KY-Q d5-47", "SystemAddress":1625603164499, "Body":"Col 173 Sector KY-Q d5-47 8 c", "BodyID":24 }

using ALICE_Core;
using ALICE_Debug;
using ALICE_Objects;
using ALICE_Settings;
using System;

namespace ALICE_Events
{
    /// <summary>
    /// Object Data Class
    /// </summary>
    public class ApproachBody : Base
    {
        public string StarSystem { get; set; }
        public decimal SystemAddress { get; set; }
        public string Body { get; set; }
        public decimal BodyID { get; set; }

        //Default Constructor
        public ApproachBody()
        {
            StarSystem = Str();
            SystemAddress = Dec();
            Body = Str();
            BodyID = Dec();
        }
    }

    /// <summary>
    /// Event Logic & Data Storage Class
    /// </summary>
    public class Event_ApproachBody : Event
    {
        //Variable Generation
        public override void Generate(object O)
        {
            try
            {
                var Event = (ApproachBody)O;

                Variables.Record(Name + "_Location", Event.Body);
                Variables.Record(Name + "_System", Event.StarSystem);
                Variables.Record(Name + "_Address", Event.SystemAddress);
            }
            catch (Exception ex)
            {
                ExceptionGenerate(Name, ex);
            }
        }

        //Plugin Logic Process
        public override void Process(object O)
        {
            try
            {
                var Event = (ApproachBody)O;

                //Update Current Stellar Body
                IObjects.StellarBodyCurrent = IObjects.SystemCurrent.Get_StellarBody(Event.BodyID);

                //Update Orbital Cruise Variables
                IStatus.Planet.OrbitalCruise(true);

                //Audio - Orbital Cruse
                IStatus.Planet.Response.OrbitaCruiseEntry(true, 
                    ICheck.Initialized(ClassName));                         //CommandAudio

                //Audio - Not Scanned
                IStatus.Planet.Response.OrbitalNotScanned(true, 
                    ICheck.Initialized(ClassName),                          //CommandAudio
                    (IObjects.StellarBodyCurrent.ID != Event.BodyID));      //Returns Default StellarBody If Not Scanned

                //Audio - High Gravity Warning
                IStatus.Planet.Response.OrbitalGravityWarning(true,
                    ICheck.Initialized(ClassName),                          //CommandAudio
                    (IObjects.StellarBodyCurrent.Gravity > 1.2M),           //High Gravity Verification
                    ISettings.HighGravDescent);                             //High Gravity Setting Check
            }
            catch (Exception ex)
            {
                ExceptionProcess(Name, ex);
            }
        }
    }
}