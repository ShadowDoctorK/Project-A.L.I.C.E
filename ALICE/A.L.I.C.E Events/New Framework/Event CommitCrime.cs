//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-11T20:57:31Z", "event":"CommitCrime", "CrimeType":"collidedAtSpeedInNoFireZone_hulldamage", "Faction":"Eureka Mining Co-Operative", "Fine":100 }
//Reference Journal Line: { "timestamp":"2018-11-22T01:47:10Z", "event":"CommitCrime", "CrimeType":"dockingMinorBlockingAirlock", "Faction":"Eureka Mining Co-Operative", "Fine":300 }
//Reference Journal Line: { "timestamp":"2018-11-22T01:47:55Z", "event":"CommitCrime", "CrimeType":"dockingMinorBlockingLandingPad", "Faction":"Eureka Mining Co-Operative", "Fine":300 }

using ALICE_Internal;
using ALICE_Synthesizer;
using System;

namespace ALICE_Events
{
    /// <summary>
    /// Object Data Class
    /// </summary>
    public class ASDF_CommitCrime : Base
    {
        public string CrimeType { get; set; }
        public string Faction { get; set; }
        public string Victim { get; set; }
        public string Victim_Localised { get; set; }
        public decimal Fine { get; set; }
        public decimal Bounty { get; set; }

        //Default Constructor
        public ASDF_CommitCrime()
        {
            CrimeType = Str();
            Faction = Str();
            Victim = Str();
            Victim_Localised = Str();
            Fine = Dec();
            Bounty = Dec();
        }
    }

    /// <summary>
    /// Event Logic & Data Storage Class
    /// </summary>
    public class QWER_CommitCrime : Event
    {
        //Variable Generation
        public override void Generate(object O)
        {
            try
            {
                var Event = (CommitCrime)O;

                Variables.Record(Name + "_Crime", Event.CrimeType);
                Variables.Record(Name + "_Faction", Event.Faction);
                Variables.Record(Name + "_Victim", Event.Victim_Localised);

                //Fine
                if (Event.Fine != -1)
                {
                    Variables.Record(Name + "_Charge", "Fine");
                    Variables.Record(Name + "_Credits", Event.Fine);
                }                     
                //Bounty
                else if (Event.Bounty != -1)
                {
                    Variables.Record(Name + "_Charge", "Bounty");
                    Variables.Record(Name + "_Credits", Event.Bounty);
                }
            }
            catch (Exception ex)
            {
                ExceptionGenerate(ex);
            }
        }

        //Plugin Logic Process
        public override void Process(object O)
        {
            try
            {
                var Event = (CommitCrime)O;

                //Convert String To Enum
                IEnums.CrimeType Crime = IEnums.ToEnum<IEnums.CrimeType>(Event.CrimeType, false);

                //Evaluate Crime Type
                switch (Crime)
                {
                    case IEnums.CrimeType.Assault:
                        Logger.Log(ClassName, Crime.ToString(), Logger.Yellow, true);
                        IEvents.Assult.Construct(Event);
                        break;
                    case IEnums.CrimeType.MinorBlockingAirlock:
                        Logger.Log(ClassName, Crime.ToString(), Logger.Yellow, true);
                        IEvents.BlockAirlockMinor.Construct(Event);
                        break;
                    case IEnums.CrimeType.MajorBlockingAirlock:
                        Logger.Log(ClassName, Crime.ToString(), Logger.Yellow, true);
                        IEvents.BlockAirlockMajor.Construct(Event);
                        break;
                    case IEnums.CrimeType.MinorBlockingLandingPad:
                        Logger.Log(ClassName, Crime.ToString(), Logger.Yellow, true);
                        IEvents.BlockLandingPadMinor.Construct(Event);
                        break;
                    case IEnums.CrimeType.MajorBlockingLandingPad:
                        Logger.Log(ClassName, Crime.ToString(), Logger.Yellow, true);
                        IEvents.BlockLandingPadMajor.Construct(Event);
                        break;
                    case IEnums.CrimeType.FireInNoFireZone:
                        Logger.Log(ClassName, Crime.ToString(), Logger.Yellow, true);
                        IEvents.FireInNoFireZone.Construct(Event);
                        break;
                    case IEnums.CrimeType.Murder:
                        Logger.Log(ClassName, Crime.ToString(), Logger.Yellow, true);
                        IEvents.Murder.Construct(Event);
                        break;
                    case IEnums.CrimeType.Piracy:
                        Logger.Log(ClassName, Crime.ToString(), Logger.Yellow, true);
                        break;
                    case IEnums.CrimeType.Interdicting:
                        Logger.Log(ClassName, Crime.ToString(), Logger.Yellow, true);
                        break;
                    case IEnums.CrimeType.IllegalCargo:
                        Logger.Log(ClassName, Crime.ToString(), Logger.Yellow, true);
                        break;
                    case IEnums.CrimeType.DisobeyPolice:
                        Logger.Log(ClassName, Crime.ToString(), Logger.Yellow, true);
                        break;
                    case IEnums.CrimeType.FireInStation:
                        Logger.Log(ClassName, Crime.ToString(), Logger.Yellow, true);
                        IEvents.FireInStation.Construct(Event);
                        break;
                    case IEnums.CrimeType.DumpingDangerous:
                        Logger.Log(ClassName, Crime.ToString(), Logger.Yellow, true);
                        break;
                    case IEnums.CrimeType.DumpingNearStation:
                        Logger.Log(ClassName, Crime.ToString(), Logger.Yellow, true);
                        break;
                    case IEnums.CrimeType.DockingMinor_Trespass:
                        Logger.Log(ClassName, Crime.ToString(), Logger.Yellow, true);
                        break;
                    case IEnums.CrimeType.DockingMajor_Trespass:
                        Logger.Log(ClassName, Crime.ToString(), Logger.Yellow, true);
                        break;
                    case IEnums.CrimeType.CollidedAtSpeedInNoFireZone:
                        Logger.Log(ClassName, Crime.ToString(), Logger.Yellow, true);
                        break;
                    case IEnums.CrimeType.CollidedAtSpeedInNoFireZone_HullDamage:
                        Logger.Log(ClassName, Crime.ToString(), Logger.Yellow, true);
                        break;
                    default:
                        #region Audio
                        if (PlugIn.Audio == "TTS")
                        {
                            Speech.Speak
                                (
                                "".Phrase(ALICE_Synthesizer.Crime.Default),
                                true,
                                Check.Internal.TriggerEvents(true, ClassName)
                                );
                        }
                        else if (PlugIn.Audio == "File") { }
                        else if (PlugIn.Audio == "External") { }
                        #endregion

                        Logger.Log(ClassName, "Detected New Crime Type: " + Event.CrimeType, Logger.Yellow);
                        Logger.Log(ClassName, "Please Provide Your Most Recent Journal Log To The Developers", Logger.Yellow);
                        break;
                }
            }
            catch (Exception ex)
            {
                ExceptionProcess(ex);
            }
        }
    }
}
