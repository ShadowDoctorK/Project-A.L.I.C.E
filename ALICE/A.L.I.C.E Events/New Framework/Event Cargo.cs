//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-15T00:14:56Z", "event":"Cargo", "Inventory":[ { "Name":"ancientrelic", "Name_Localised":"Ancient Relic", "Count":1, "Stolen":0 }, { "Name":"ancientcasket", "Name_Localised":"Ancient Casket", "Count":2, "Stolen":0 }, { "Name":"ancienttablet", "Name_Localised":"Ancient Tablet", "Count":2, "Stolen":0 }, { "Name":"ancientorb", "Name_Localised":"Ancient Orb", "Count":3, "Stolen":0 }, { "Name":"ancienturn", "Name_Localised":"Ancient Urn", "Count":3, "Stolen":0 }, { "Name":"ancienttotem", "Name_Localised":"Ancient Totem", "Count":3, "Stolen":0 }, { "Name":"drones", "Name_Localised":"Limpet", "Count":10, "Stolen":0 } ] }

using System;
using System.Collections.Generic;

namespace ALICE_Events
{
    /// <summary>
    /// Object Data Class
    /// </summary>
    public class ASDF_Cargo : Base
    {
        public string Vessel { get; set; }
        public decimal Count { get; set; }
        public List<CargoItem> Inventory { get; set; }

        //Default Constructor
        public ASDF_Cargo()
        {
            Vessel = Str();
            Count = Dec();
            Inventory = new List<CargoItem>();
        }

        public class CargoItem : Catch
        {
            public string Name { get; set; }
            public string Name_Localised { get; set; }
            public decimal Count { get; set; }
            public decimal Stolen { get; set; }

            public CargoItem()
            {
                Name = Str();
                Name_Localised = Str();
                Count = Dec();
                Stolen = Dec();
            }
        }
    }

    /// <summary>
    /// Event Logic & Data Storage Class
    /// </summary>
    public class QWER_Cargo : Event
    {
        //Variable Generation
        public override void Generate(object O)
        {
            try
            {
                var Event = (Cargo)O;

                Variables.Record(Name + "_Vehicle", Event.Vessel);
                Variables.Record(Name + "_Count ", Event.Count);
            }
            catch (Exception ex)
            {
                ExceptionGenerate(ex);
            }
        }

        //Plugin Logic Process
        public override void Process(object O)
        {
            try
            {
                var Event = (Cargo)O;
            }
            catch (Exception ex)
            {
                ExceptionProcess(ex);
            }
        }
    }
}
