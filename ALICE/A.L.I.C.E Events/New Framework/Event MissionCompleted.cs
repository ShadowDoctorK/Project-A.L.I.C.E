//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-29T01:11:03Z", "event":"MissionCompleted", "Faction":"The Fuel Rats Mischief", "Name":"Mission_Massacre_Conflict_War_name", "MissionID":429329381, "TargetFaction":"Constitution Party of Fuelum", "KillCount":72, "DestinationSystem":"Fuelum", "DestinationStation":"Wollheim Vision", "Reward":2157547, "FactionEffects":[ { "Faction":"The Fuel Rats Mischief", "Effects":[ { "Effect":"$MISSIONUTIL_Interaction_Summary_lockdown_down;", "Effect_Localised":"$#MinorFaction; have less signs of imposing a security lockdown.", "Trend":"DownGood" } ], "Influence":[  ], "Reputation":"UpGood" }, { "Faction":"Constitution Party of Fuelum", "Effects":[ { "Effect":"$MISSIONUTIL_Interaction_Summary_lockdown_up;", "Effect_Localised":"Further terrorist actions could see the $#MinorFaction; considering a security lockdown ", "Trend":"UpBad" } ], "Influence":[  ], "Reputation":"DownBad" } ] }

using System;
using System.Collections.Generic;

namespace ALICE_Events
{
    /// <summary>
    /// Object Data Class
    /// </summary>
    public class ASDF_MissionCompleted : Base
    {
        public string Faction { get; set; }
        public string Name { get; set; }
        public decimal MissionID { get; set; }
        public string TargetType { get; set; }
        public string TargetType_Localised { get; set; }
        public string Commodity { get; set; }
        public string Commodity_Localised { get; set; }
        public decimal Count { get; set; }
        public string TargetFaction { get; set; }
        public decimal KillCount { get; set; }
        public string DestinationSystem { get; set; }
        public string DestinationStation { get; set; }
        public string Target { get; set; }
        public string Target_Localised { get; set; }
        public decimal Reward { get; set; }
        public List<MatReward> MaterialsReward { get; set; }
        public List<MatReward> CommodityReward { get; set; }
        public decimal Donation { get; set; }
        public List<FactionReport> FactionEffects { get; set; }

        //Default Constructor
        public ASDF_MissionCompleted()
        {
            Faction = Str();
            Name = Str();
            TargetType = Str();
            TargetType_Localised = Str();
            Donation = Dec();
            Commodity = Str();
            Commodity_Localised = Str();
            Count = Dec();
            TargetFaction = Str();
            KillCount = Dec();
            DestinationSystem = Str();
            DestinationStation = Str();
            Target = Str();
            Target_Localised = Str();
            Reward = Dec();
            MissionID = Dec();
            MaterialsReward = new List<MatReward>();
            CommodityReward = new List<MatReward>();
            FactionEffects = new List<FactionReport>();
        }

        public class MatReward : Catch
        {
            public string Name { get; set; }
            public string Name_Localised { get; set; }
            public string Category { get; set; }
            public string Category_Localised { get; set; }
            public decimal Count { get; set; }

            public MatReward()
            {
                Name = Str();
                Name_Localised = Str();
                Category = Str();
                Category_Localised = Str();
                Count = Dec();
            }
        }

        public class FactionReport : Catch
        {
            public string Faction { get; set; }
            public string Reputation { get; set; }
            public List<FactionEffect> Effects { get; set; }
            public List<FactionInfluence> Influence { get; set; }

            public FactionReport()
            {
                Faction = Str();
                Reputation = Str();
                Effects = new List<FactionEffect>();
                Influence = new List<FactionInfluence>();
            }
        }

        public class FactionEffect : Catch
        {
            public string Effect { get; set; }
            public string Effect_Localised { get; set; }
            public string Trend { get; set; }

            public FactionEffect()
            {
                Effect = Str();
                Effect_Localised = Str();
                Trend = Str();
            }
        }

        public class FactionInfluence : Catch
        {
            public decimal SystemAddress { get; set; }
            public string Trend { get; set; }

            public FactionInfluence()
            {
                SystemAddress = Dec();
                Trend = Str();
            }
        }
    }

    /// <summary>
    /// Event Logic & Data Storage Class
    /// </summary>
    public class QWER_MissionCompleted : Event
    {
        //Variable Generation
        public override void Generate(object O)
        {
            try
            {
                var Event = (MissionCompleted)O;

                Variables.Record(Name + "_ID", Event.MissionID);
                Variables.Record(Name + "_Faction", Event.Faction);                
                Variables.Record(Name + "_Type", Event.Name);
                Variables.Record(Name + "_Donation", Event.Donation);
                Variables.Switch(Name + "_Commodity", Event.Commodity_Localised, Event.Commodity);
                Variables.Record(Name + "_Count", Event.Count);
                Variables.Switch(Name + "_Target", Event.Target_Localised, Event.Target);
                Variables.Switch(Name + "_TargetType", Event.TargetType_Localised, Event.TargetType);
                Variables.Record(Name + "_TargetFaction", Event.TargetFaction);
                Variables.Record(Name + "_KillCount", Event.KillCount);
                Variables.Record(Name + "_DestinationSystem", Event.DestinationSystem);
                Variables.Record(Name + "_DestinationStation", Event.DestinationStation);
                Variables.Record(Name + "_Reward", Event.Reward);
            }
            catch (Exception ex)
            {
                ExceptionGenerate(Name, ex);
            }
        }
    }
}