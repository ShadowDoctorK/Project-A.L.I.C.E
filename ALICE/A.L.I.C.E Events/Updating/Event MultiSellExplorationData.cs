//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 12/20/2018 5:40 AM
//Source Journal Line: { "timestamp":"2018-12-20T09:54:15Z", "event":"MultiSellExplorationData", "Discovered":[ { "SystemName":"LP 816-60", "NumBodies":5 }, { "SystemName":"LHS 470", "NumBodies":9 }, { "SystemName":"Piscium Sector KY-H a10-0", "NumBodies":1 }, { "SystemName":"Wolf 1509", "NumBodies":4 }, { "SystemName":"Zugen", "NumBodies":1 }, { "SystemName":"Ross 154", "NumBodies":2 }, { "SystemName":"MU Cassiopeia", "NumBodies":3 }, { "SystemName":"Alrai Sector JH-V b2-6", "NumBodies":1 }, { "SystemName":"Wolf 1061", "NumBodies":1 }, { "SystemName":"Wolf 922", "NumBodies":1 }, { "SystemName":"Piscium Sector JD-I a10-1", "NumBodies":1 }, { "SystemName":"Piscium Sector IY-H a10-2", "NumBodies":1 } ], "BaseValue":212123, "Bonus":0, "TotalEarnings":190916 }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;
using ALICE_EventLogic;

namespace ALICE_Events
{
    public class Event_MultiSellExplorationData : Event_Base
    {
        public Event_MultiSellExplorationData()
        {
            Name = "MultiSellExplorationData";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            //Process.MulitSellExplorationData((MulitSellExplorationData)GetEvent());

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            MultiSellExplorationData Event = (MultiSellExplorationData)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables

            #endregion
        }
    }

    #region MulitSellExplorationData Event
    public class MultiSellExplorationData : Base
    {
        public List<Discover> Discovered { get; set; }
        public decimal BaseValue { get; set; }
        public decimal Bonus { get; set; }
        public decimal TotalEarnings { get; set; }

        public class Discover
        {
            public string SystemName { get; set; }
            public decimal NumBodies { get; set; }
        }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == MulitSellExplorationData)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.MulitSellExplorationData>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.MulitSellExplorationData.Logic();
// }
