//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/21/2018 10:41 PM
//Source Journal Line: { "timestamp":"2018-11-22T02:28:11Z", "event":"FSSSignalDiscovered", "SystemAddress":560216394091, "SignalName":"$USS;", "SignalName_Localised":"Unidentified signal source", "USSType":"$USS_Type_ValuableSalvage;", "USSType_Localised":"Encoded emissions", "SpawningState":"$FactionState_None;", "SpawningState_Localised":"None", "SpawningFaction":"$faction_none;", "SpawningFaction_Localised":"None", "ThreatLevel":0, "TimeRemaining":1715.851929 }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Actions;
using ALICE_Internal;
using ALICE_EventLogic;

namespace ALICE_Events
{
    public class Event_FSSSignalDiscovered : Event_Base
    {
        public Event_FSSSignalDiscovered()
        {
            Name = "FSSSignalDiscovered";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            //Process.FSSSignalDiscovered((FSSSignalDiscovered)GetEvent());

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            FSSSignalDiscovered Event = (FSSSignalDiscovered)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("SystemAddress", Event.SystemAddress.ToString());
            Variable_Craft("SignalName", Event.SignalName.ToString());
            Variable_Craft("SignalName_Localised", Event.SignalName_Localised.ToString());
            Variable_Craft("USSType", Event.USSType.ToString());
            Variable_Craft("USSType_Localised", Event.USSType_Localised.ToString());
            Variable_Craft("SpawningState", Event.SpawningState.ToString());
            Variable_Craft("SpawningState_Localised", Event.SpawningState_Localised.ToString());
            Variable_Craft("SpawningFaction", Event.SpawningFaction.ToString());
            Variable_Craft("SpawningFaction_Localised", Event.SpawningFaction_Localised.ToString());
            Variable_Craft("ThreatLevel", Event.ThreatLevel.ToString());
            Variable_Craft("TimeRemaining", Event.TimeRemaining.ToString());
            Variable_Craft("IsStation", Event.IsStation.ToString());
            #endregion
        }
    }

    #region FSSSignalDiscovered Event
    public class FSSSignalDiscovered : Base
    {
        public decimal SystemAddress { get; set; }
        public string SignalName { get; set; }
        public string SignalName_Localised { get; set; }
        public string USSType { get; set; }
        public string USSType_Localised { get; set; }
        public string SpawningState { get; set; }
        public string SpawningState_Localised { get; set; }
        public string SpawningFaction { get; set; }
        public string SpawningFaction_Localised { get; set; }
        public decimal ThreatLevel { get; set; }
        public decimal TimeRemaining { get; set; }
        public bool IsStation { get; set; }

        public FSSSignalDiscovered()
        {
            SignalName = Default.String;
            SignalName_Localised = Default.String;
            USSType = Default.String;
            USSType_Localised = Default.String;
            SpawningState = Default.String;
            SpawningState_Localised = Default.String;
            SpawningFaction = Default.String;
            SpawningFaction_Localised = Default.String;
            ThreatLevel = Default.Decimal;
            TimeRemaining = Default.Decimal;
        }
    }
    #endregion
}


//Journal Reader Code Chunk.

// else if (EventName == "FSSSignalDiscovered")
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.FSSSignalDiscovered>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.FSSSignalDiscovered.Logic();
// }
