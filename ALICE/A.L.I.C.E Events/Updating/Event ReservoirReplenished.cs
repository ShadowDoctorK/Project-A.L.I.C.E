//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 01/18/2018 5:27 AM
//Source Journal Line: { "timestamp":"2019-01-18T08:54:12Z", "event":"ReservoirReplenished", "FuelMain":29.326540, "FuelReservoir":0.830000 }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;

namespace ALICE_Events
{
    public class Event_ReservoirReplenished : Event_Base
    {
        public Event_ReservoirReplenished()
        {
            Name = "ReservoirReplenished";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            //IObjects.Logic_ReservoirReplenished((ReservoirReplenished)GetEvent());

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            ReservoirReplenished Event = (ReservoirReplenished)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("FuelMain", Event.FuelMain.Variable());
            Variable_Craft("FuelReservoir", Event.FuelReservoir.Variable());
            #endregion
        }
    }

    #region ReservoirReplenished Event
    public class ReservoirReplenished : Base
    {
        public decimal FuelMain { get; set; }
        public decimal FuelReservoir { get; set; }

        public ReservoirReplenished()
        {
            FuelMain = Default.Decimal;
            FuelReservoir = Default.Decimal;
        }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == "ReservoirReplenished")
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.ReservoirReplenished>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.ReservoirReplenished.Logic();
// }
