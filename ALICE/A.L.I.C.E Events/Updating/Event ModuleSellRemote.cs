//Code Generated By Project A.L.I.C.E Developer Toolkit
//Class File Generated: 11/12/2018 1:27 AM
//Source Journal Line: { "timestamp":"2018-10-19T03:33:43Z", "event":"ModuleSellRemote", "StorageSlot":44, "SellItem":"$int_buggybay_size6_class2_name;", "SellItem_Localised":"Planetary Vehicle Hangar", "ServerId":128672293, "SellPrice":691200, "Ship":"federation_corvette", "ShipID":11 }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ALICE_Objects;
using ALICE_Internal;

namespace ALICE_Events
{
    public class Event_ModuleSellRemote : Event_Base
    {
        public Event_ModuleSellRemote()
        {
            Name = "ModuleSellRemote";
        }

        public void Logic()
        {
            if (IEvents.WriteVariables && WriteVariables)
            {
                try
                {
                    Variables_Clear();
                    Variables_Generate();
                    Variables_Write();
                }
                catch (Exception ex)
                {
                    Logger.Exception(Name, "An Exception Occured While Updating Variables");
                    Logger.Exception(Name, "Exception: " + ex);
                }
            }

            //Custom Logic Here.

            TriggerEvent();
        }

        public void Variables_Generate()
        {
            ModuleSellRemote Event = (ModuleSellRemote)IEvents.GetEvent(Name);

            Variables.Clear();

            #region Custom Variables

            #endregion

            #region Event Variables
            Variable_Craft("StorageSlot", Event.StorageSlot.Variable());
            Variable_Craft("SellItem", Event.SellItem.Variable());
            Variable_Craft("SellItem_Localised", Event.SellItem_Localised.Variable());
            Variable_Craft("ServerId", Event.ServerId.Variable());
            Variable_Craft("SellPrice", Event.SellPrice.Variable());
            Variable_Craft("Ship", Event.Ship.Variable());
            Variable_Craft("ShipID", Event.ShipID.Variable());
            #endregion
        }
    }

    #region ModuleSellRemote Event
    public class ModuleSellRemote : Base
    {
        public decimal StorageSlot { get; set; }
        public string SellItem { get; set; }
        public string SellItem_Localised { get; set; }
        public decimal ServerId { get; set; }
        public decimal SellPrice { get; set; }
        public string Ship { get; set; }
        public decimal ShipID { get; set; }
    }
    #endregion
}

//Journal Reader Code Chunk.

// else if (EventName == ModuleSellRemote)
// {
//     var Event = JsonConvert.DeserializeObject<ALICE_Events.ModuleSellRemote>(RawLine);
//     IEvents.UpdateEvents(EventName, Event);
//     IEvents.Bounty.Logic();
// }
